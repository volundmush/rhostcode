@skip isdbref(tag(setr(1,scene)))={@assert/inline isdbref(globalroom())=@pemit %#=ERROR: No global room set!;@assert/inline isdbref(setr(0,create(Scene System,,t)))=@pemit %#=ERROR: Could not create code object %q1: %q0;@set %q0=INDESTRUCTIBLE !NO_COMMAND;@tag/add %q1=%q0;@tel %q0=[globalroom()]}

&CMD.SCENE #scene=$^(?s)(?\:\+)(scene|scenes|plot|plots|rplog|rplogs|log|logs)(?\:/(\\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:th setq(!,switch(%1,scene,scene,scenes,scene,plot,plot,plots,plot,rplog,scene,rplogs,scene,log,scene,logs,scene),family);@assert/inline isint(setr(!,u(FN.PREPENT,%#),ent))=@pemit %#=Couldn't create Entity: %q<ent>;@attach #inc/GET_SWITCH=%2,%q<family>;@attach %!/SW.%q<family>.[strfirstof(%q<switch>,MAIN)]=trim(%3),%4
@set #scene/CMD.SCENE=regexp


@@ SCENE section
&SWITCHES.SCENE.0 #scene=CREATE|TITLE|PITCH|OUTCOME|START|PAUSE|FINISH|TAG|UNTAG|SCHEDULE|RESCHEDULE|UNDO|REDO|EDIT|UPCOMING|OLD|ROLE|WITH|RECALL

&Q.SELECT.SCENE_VIEW #scene=SELECT ! FROM scene_view WHERE scene_id=?

&LIST.SCENES.COLUMN #scene=printf($-5s $-40s $-21s $-11s,ID,Title,Owner,Status)
&LIST.SCENES.ROW #scene=printf($-5s $-40s $-21s $-11s,%0,mysql(SELECT.SCENE,scene_title,%0),if(isobjid(elementsmux(setr(!,mysql2(SELECT.SCENE_VIEW,owner_objid[chr(44)]owner_name[chr(44)]scene_status_name,%0),data),1,^)),cname(elementsmux(%q<data>,1,^)),elementsmux(%q<data>,2,^)),elementsmux(%q<data>,3,^))

&LIST.SCENES #scene=@pemit %#=header(%0);@pemit %#=ansi(confoverride(%#,COLUMN),u(LIST.SCENES.COLUMN));@if words(%1)={@dolist/inline %1={@pemit %#=u(LIST.SCENES.ROW,%d0)}};@pemit %#=footer();
@@ %0 - header display. %1 - list of scene IDs.

&Q.SELECT.SCENES_OF #scene=SELECT scene_id FROM scene_view WHERE owner_objid=? AND scene_status!

&Q.SELECT.PARTICIPANTS #scene=SELECT entity_objid,entity_name,actor_type,actor_type_name,action_count,actor_id FROM actor_view WHERE scene_id=? ORDER BY actor_type DESC

&Q.SELECT.ROLES #scene=SELECT ! FROM actrole_view WHERE actor_id=?

&FN.SCENE_PLAYERS.COLUMN #scene=printf($-10s $-21s $-10s $-34s,Status,Name,PoseCount,Roles)
&FN.SCENE_PLAYERS.ROW #scene=printf($-10s $-21s $-10s $-|"34s,elementsmux(%0,4,^),if(isobjid(elementsmux(%0,1,^)),cname(elementsmux(%0,1,^)),elementsmux(%0,2,^)%B\(Deleted\)),elementsmux(%0,5,^),edit(mysql2(SELECT.ROLES,actrole_name,elementsmux(%0,6,^)),|,chr(44)%B))

&Q.SELECT.SCENE_PLOTS #scene=SELECT plot_id FROM scene_plot WHERE scene_id=?

&INC.SCENE.DISPLAY #scene=@attach %!/FINDSCENE=%0,scene;@pemit %#=header(Scene %q<scene>: '%q<sname>');@pemit %#=[ansi(hw,rjust(Status:,15))]%B[mysql(SELECT.SCENE_VIEW,scene_status_name,%q<scene>)];@dolist/inline Created Scheduled Started Finished Activity={@if isint(setr(!,mysql(SELECT.SCENE_VIEW,scene_date_[lcstr(%d0)]_secs,%q<scene>),timestamp))={@pemit %#=[ansi(hw,rjust(%d0 Date:,15))]%b[fancytime(%q<timestamp>)]}};@dolist/inline Pitch Outcome={@if strlen(setr(!,mysql(SELECT.SCENE,scene_[lcstr(%d0)],%q<scene>),text))={@pemit %#=separator(%d0);@pemit %#=%q<text>}};@if words(setr(!,mysql2(SELECT.PARTICIPANTS,%q<scene>),data),|)={@pemit %#=subheader(Players);@pemit %#=ansi(confoverride(%#,COLUMN),u(FN.SCENE_PLAYERS.COLUMN));@dolist/inline/delimit | %q<data>={@pemit %#=u(FN.SCENE_PLAYERS.ROW,%d0)}};@if words(setr(!,mysql(SELECT.SCENE_PLOTS,%q<scene>),plots))={@pemit %#=subheader(Related Plots);@pemit %#=ansi(confoverride(%#,COLUMN),u(FN.PLOT.COLUMNS));@dolist/inline %q<plots>={@pemit %#=u(FN.PLOT.ROW,%d0)}};@pemit %#=footer()

&SW.SCENE.MAIN #scene=@if isint(%0)={@attach %!/INC.SCENE.DISPLAY},{@attach #inc/GET_PLAYER=strfirstof(%0,%#),t1;@attach %!/LIST.SCENES=[if(strmatch(%q<t1>,%:),Your,cname(%q<t1>)'s)] Incomplete Scenes,mysql(SELECT.SCENES_OF,%q<t1>,<3)}

&FN.SCHEDULE.COLUMN #scene=printf($-6s $-5s $-36s $-21s $-8s,Tags,ID,TItle,Owner,Time)
&FN.SCHEDULE.ROW #scene=printf($-1s$:0:2s/$:0:2s $5-s $-36s $21-s $-8s,[setq(!,filterobjid(elementsmux(%0,5,^)),objids)][if(strmatch(%:,elementsmux(%0,2,^)),ansi(hg,*),if(match(setr(!,u(#acc/FN.CHARACTERS,account(%:)),alts),%:),ansi(g,*),if(match(%q<objids>,%:),ansi(hr,*),if(words(setinter(%q<alts>,%q<objids>)),ansi(r,*)))))],words(%q<objids>),switch(elementsmux(%0,6,^),>0,elementsmux(%0,6,^),--),elementsmux(%0,1,^),mysql(SELECT.SCENE,scene_title,elementsmux(%0,1,^)),if(isobjid(elementsmux(%0,2,^)),cname(elementsmux(%0,2,^)),elementsmux(%0,3,^)%B\(Deleted\)),fancytime(elementsmux(%0,4,^),4,%#,$H:$T$P))

&Q.SELECT.UPCOMING #scene=SELECT scene_id,owner_objid,owner_name,scene_date_scheduled_secs,tagged_objids,scene_capacity FROM scene_scheduled

&SW.SCENE.UPCOMING #scene=@pemit %#=header(Upcoming Scenes - [gettz(%#)]);@pemit %#=ansi(confoverride(%#,COLUMN),u(FN.SCHEDULE.COLUMN));@if words(setr(!,mysql2(SELECT.UPCOMING),data),|)={@dolist/inline/delimit | %q<data>={@skip strmatch(%q<lastdate>,setr(!,fancytime(elementsmux(%d0,4,^),4,%#,$a $b $D $Y),lastdate))={@pemit %#=separator(%q<lastdate>)};@pemit %#=u(FN.SCHEDULE.ROW,%d0)}};@pemit %#=footer()

&SW.SCENE.OLD #scene=@attach #inc/GET_PLAYER=strfirstof(%0,%#),t1;@attach %!/LIST.SCENES=[if(strmatch(%q<t1>,%:),Your,cname(%q<t1>)'s)] Finished Scenes,mysql(SELECT.SCENES_OF,%q<t1>,=3)

&Q.SELECT.SCENES_INVOLVING #scene=SELECT scene_id FROM actor_view WHERE entity_objid=? AND action_count>0

&SW.SCENE.WITH #scene=@if cand(strlen(%0),strlen(%1))={@attach #inc/GET_PLAYER=%0,t1;@attach #inc/GET_PLAYER=%1,t2},{@attach #inc/GET_PLAYER=%0,t2;th setq(!,%:,t1)};@attach %!/LIST.SCENES=[if(strmatch(%q<t1>,%:),Your,cname(%q<t1>)'s)] scenes with [if(strmatch(%q<t2>,%:),You,cname(%q<t2>))],setunion(mysql(SELECT.SCENES_INVOLVING,%q<t1>),mysql(SELECT.SCENES_INVOLVING,%q<t2>),%b,%b,n)

&Q.PREPENT.SELECT #scene=SELECT entity_id FROM entity WHERE entity_objid=?
&Q.PREPENT.INSERT #scene=INSERT INTO entity (entity_name,entity_objid) VALUES (?,?)
&FN.PREPENT #scene=privatize(1,if(isint(setr(!,mysql(PREPENT.SELECT,objid(%0)),res)),%q<res>,if(!strlen(setr(!,mysql(PREPENT.INSERT,name(%0),objid(%0)),res)),u(FN.PREPENT,%0),#-1 SQL ERROR: %q<res>)))

&Q.PREPACT.SELECT #scene=SELECT actor_id FROM actor_view WHERE scene_id=? AND entity_objid=?
&Q.PREPACT.INSERT #scene=INSERT actor (scene_id,entity_id,actor_date_created) VALUES (?,?,FROM_UNIXTIME(?))
&FN.PREPACT #scene=privatize(1,if(isint(setr(!,mysql(PREPACT.SELECT,%0,objid(%1)),res)),%q<res>,if(!strlen(setr(!,mysql(PREPACT.INSERT,%0,u(FN.PREPENT,%1),secs()),res)),u(FN.PREPACT,%0,%1),#-1 SQL ERROR: %q<res>)))


&Q.UPDATE.POSE.FIELD #scene=UPDATE pose SET !=? WHERE pose_id=?

&Q.UPDATE.SCENE #scene=UPDATE scene SET !=? WHERE scene_id=?
&Q.UPDATE.SCENE.UNIXTIME #scene=UPDATE scene SET !=FROM_UNIXTIME(?) WHERE scene_id=?

&START_SCENE #scene=@set %l=GAME.SCENE:%0;@attach #inc/DOSQL=UPDATE.SCENE,scene_status,1,%0;@attach #inc/DOSQL=UPDATE.SCENE.UNIXTIME=scene_date_started,secs(),%0
@@ %0 - Scene ID.

&PAUSE_SCENE #scene=@attach #inc/DOSQL=UPDATE.SCENE,scene_status,2,%0;

&Q.INSERT.ACTOR #scene=INSERT actor (scene_id,entity_id,actor_type,actor_date_created) VALUES (?,?,?,FROM_UNIXTIME(?))

&MSG_SCENE #scene=@pemit/list [setunion(sql(SELECT entity_objid FROM actor_view WHERE scene_id=%0 AND actor_type>=%1),%2)]=[ansi(c,SCENE %0:)] [gm_format(%3,##,%:)]
@@ %0 - scene id, %1 - minimum actor_type to display to, %2 - extra objids to send to. %3 - message. %4 - send to this room too.

&Q.INSERT.SCENE #scene=INSERT INTO scene (scene_title,scene_date_created,scene_date_scheduled) VALUES (?,FROM_UNIXTIME(?),FROM_UNIXTIME(?))

&SW.SCENE.CREATE #scene=@attach #inc/CHECK_APP_GUEST;@assert/inline strlen(%0)=@pemit %#=No name entered!;@attach #inc/DOSQL=INSERT.SCENE/scene,%0,secs(),strfirstof(%2,secs());@if strlen(%1)={@attach #inc/DOSQL=UPDATE.SCENE,scene_pitch,%1,%q<scene>};@attach #inc/DOSQL=INSERT.ACTOR,%q<scene>,%q<ent>,2,secs();@if strlen(%2)={@attach %!/MSG_SCENE=%q<scene>,0,lwho(),Scheduled for $fancytime(%2) by $you()},{@attach %!/MSG_SCENE=%q<scene>,0,lcon(%l,LISTEN,,,1),Scene has been created by $you()!}

&SW.SCENE.SCHEDULE #scene=@attach #inc/VALID.FUTURE=before(%0,/);@attach %!/SW.SCENE.CREATE=after(%0,/),%1,%q<value>

&Q.SELECT.SCENE #scene=SELECT ! FROM scene WHERE scene_id=?

&FINDSCENE #scene=@assert/inline strlen(%0)=@pemit %#=No Scene ID entered!;@assert/inline isint(setr(!,mysql(SELECT.SCENE,scene_id,%0),%1))=@pemit %#=That isn't a valid scene ID!;th setq(!,mysql(SELECT.SCENE,scene_title,%0),sname);

&Q.SELECT.ACTOR.TYPE #scene=SELECT actor_type FROM actor WHERE scene_id=? AND entity_id=?

&CANCONTROL #scene=@assert cor(gtebittype(%#,4),gte(mysql(SELECT.ACTOR.TYPE,%q<scene>,%q<ent>),2))=@pemit %#=Permission denied.;

&STATUSCHANGE #scene=@attach %!/FINDSCENE=%0,scene;@attach %!/CANCONTROL;@attach #inc/DOSQL=UPDATE.SCENE,scene_status,%1,%q<scene>;@pemit %#=Scene %q<scene>: '%q<sname>' has been marked: %2!;@attach %!/MSG_SCENE=%q<scene>,0,lcon(%l,LISTEN,,,1),Scene has been %2 by $you()!;@if eq(1,%1)={@set %l=GAME.SCENE:%q<scene>},{@set %l=GAME.SCENE:}

&SW.SCENE.START #scene=@attach %!/STATUSCHANGE=%0,1,started
&SW.SCENE.PAUSE #scene=@attach %!/STATUSCHANGE=%0,2,paused
&SW.SCENE.FINISH #scene=@attach %!/STATUSCHANGE=%0,3,finished

&PITCHCOME #scene=@attach %!/FINDSCENE=%0,scene;@attach %!/CANCONTROL;@assert/inline strlen(%1)=@pemit %#=No %1 entered!;@attach #inc/DOSQL=UPDATE.SCENE,scene_%1,%2,%q<scene>;@attach %!/MSG_SCENE=%0,0,%:,[capstr(%1)] updated by $you()!
@@ %0 - scene, %1 - field, %2 - text

&SW.SCENE.TITLE #scene=@attach %!/PITCHCOME=%0,title,%1;
&SW.SCENE.PITCH #scene=@attach %!/PITCHCOME=%0,pitch,%1;
&SW.SCENE.OUTCOME #scene=@attach %!/PITCHCOME=%0,outcome,%1;

&SW.SCENE.RESCHEDULE #scene=@attach %!/FINDSCENE=%0,scene;@attach %!/CANCONTROL;@attach #inc/VALID.FUTURE=%1;@attach #inc/DOSQL=UPDATE.SCENE.UNIXTIME,scene_date_scheduled,%q<value>,%q<scene>;@attach #inc/DOSQL=UPDATE.SCENE,scene_status,0,%q<scene>;@attach %!/MSG_SCENE=%q<scene>,0,%:,$you() rescheduled the Scene to: $fancytime(%q<value>)

&Q.UPDATE.ACTOR.FIELD #scene=UPDATE actor SET !=? WHERE actor_id=?

&SW.SCENE.CAPACITY #scene=@attach %!/FINDSCENE=%0,scene;@assert/inline cor(gtebittype(%#,5),gte(mysql(SELECT.ACTOR.TYPE,%q<scene>,%q<ent>),2))=@pemit %#=Permission denied.;@attach #inc/VALID.INT=%1,Scene Capacity;@attach #inc/DOSQL=UPDATE.SCENE,scene_capacity,%q<value>,%q<scene>;@attach %!/MSG_SCENE=%0,0,%:,$you() altered capacity to: %q<value>

&SW.SCENE.ACTOR_VIEW_TYPE #scene=SELECT ! FROM actor_view WHERE scene_id=? AND actor_type=?

&SW.SCENE.TAG #scene=@attach %!/FINDSCENE=%0,scene;@break/inline cand(gt(setr(!,mysql(SELECT.SCENE,scene_capacity,%q<scene>),capacity),0),gte(words(filterobjid(mysql(SCENE.ACTOR_VIEW_TYPE,entity_objid,%q<scene>,1))),%q<capacity>))=@pemit %#=Scene is at tagging capacity. Sorry.;@break/inline gt(mysql(SELECT.ACTOR.TYPE,%q<scene>,%q<ent>),0)=@pemit %#=You already tagged Scene %q<scene>: '%q<sname>'!;th setq(!,u(FN.PREPACT,%q<scene>,%:),actor);@attach #inc/DOSQL=UPDATE.ACTOR.FIELD,actor_type,1,%q<actor>;@attach %!/MSG_SCENE=%0,0,%:,$you() tagged the scene!

&SW.SCENE.UNTAG #scene=@attach %!/FINDSCENE=%0,scene;@assert/inline eq(mysql(SELECT.ACTOR.TYPE,%q<scene>,%q<ent>),1)=@pemit %#=You haven't tagged Scene %q<scene>: '%q<sname>'!;th setq(!,u(FN.PREPACT,%q<scene>,%:),actor);@attach %!/MSG_SCENE=%0,0,%:,$you() un-tagged the scene!;@attach #inc/DOSQL=UPDATE.ACTOR.FIELD,actor_type,0,%q<actor>

&SW.SCENE.ROLE #scene=@if strlen(%0)={@set %#=GAME.SCENE.ROLE:[if(strmatch(%0,None),,%0)];@pemit %#=Your new Scene Role is: [if(strmatch(%0,None),<none - yourself!>),%0)]},{@pemit %#=Your current Scene Role is: [default(%#/GAME.SCENE.ROLE,<none - yourself!>)]}

&Q.SELECT.POSE #scene=SELECT ! FROM pose_view WHERE scene_id=? and pose_id=?
&Q.UPDATE.POSE #scene=UPDATE pose SET !=? WHERE pose_id=?

&LOCALSCENE #scene=@assert/inline cand(isint(setr(!,get(%l/GAME.SCENE),scene)),mysql(SELECT.SCENE_ACTIVE,%q<scene>))=@pemit %#=No locally active scene!

&FINDPOSE #scene=@attach %!/LOCALSCENE;@assert/inline strlen(%0)=@pemit %#=No pose ID entered!;@assert/inline isint(setr(!,mysql(SELECT.POSE,pose_id,%q<scene>,%0),pose))=@pemit %#=Pose ID '%0' not found in Scene %q<scene>.;@assert/inline eq(%q<ent>,mysql(SELECT.POSE,entity_id,%q<scene>,%q<pose>))=@pemit %#=Permission denied. You are not the poster.;@break/inline eq(mysql(SELECT.SCENE,scene_status,%q<scene>),3)=@pemit %#=That scene is finished!;@break/inline gte(sub(secs(),mysql(SELECT.POSE,pose_date_created_secs,%q<scene>,%q<pose>)),mul(60,60,2))=@pemit %#=That pose is older than 2 hours. It can no longer be modified.

&SW.SCENE.EDIT #scene=@attach %!/FINDPOSE=%0;@assert/inline strlen(setr(!,first(%0,^^^),before))=@pemit %#=Nothing entered to edit!;th setq(!,rest(%0,^^^),after);th setq(!,mysql(SELECT.POSE,pose_text,%q<scene>,%q<pose>),data);th setq(!,medit(%q<data>,%q<before>,%q<after>),newpose);@break/inline eq(0,comp(%q<data>,%q<newpose>))=@pemit %#=Nothing seems to have changed!;@attach #inc/DOSQL=UPDATE.POSE,pose_text,%q<newpose>,%q<pose>;@attach %!/MSG_SCENE=%q<scene>,0,%:,$you() edited Pose %q<pose>: '%q<before>' to '%q<after>'

&SW.SCENE.UNDO #scene=@attach %!/FINDPOSE=%0;@break/inline t(mysql(SELECT.POSE,pose_is_deleted,%q<scene>,%q<pose>))=@pemit %#=That pose is already off the record!;@attach #inc/DOSQL=UPDATE.POSE,pose_is_deleted,1,%q<pose>;@attach %!/MSG_SCENE=%q<scene>,0,%:,$you() scrubbed Pose %q<pose> from the log.
&SW.SCENE.REDO #scene=@attach %!/FINDPOSE=%0;@assert/inline t(mysql(SELECT.POSE,pose_is_deleted,%q<scene>,%q<pose>))=@pemit %#=That pose is not off the record!;@attach #inc/DOSQL=UPDATE.POSE,pose_is_deleted,0,%q<pose>;@attach %!/MSG_SCENE=%q<scene>,0,%:,$you() re-added Pose %q<pose> to the log.

&Q.SELECT.RECALL #scene=SELECT pose_id,channel_category,channel_category_name,display_name,channel_name FROM pose_view WHERE scene_id=? AND pose_is_deleted=0 ORDER by pose_id DESC LIMIT ?

&SW.SCENE.RECALL #scene=@attach %!/FINDSCENE=%0,scene;@if strlen(%1)={@attach #inc/VALID.POSINT=%1,Pose Count},{th setq(!,10,value)};@assert/inline words(setr(!,mysql2(SELECT.RECALL,%q<scene>,%q<value>),poses))=@pemit %#=No poses to recall!;@pemit %#=header(Last %q<value> logged actions for Scene %q<scene>);@dolist/inline/delimit | [revwords(%q<poses>,|)]={@pemit %#=separator([chr(91)][ansi(hg,elementsmux(%d0,1,^))][chr(93)]%B[ansi(hw,By)]%B[elementsmux(%d0,4,^)][chr(44)]%B[ansi(hw,via:)]%B[elementsmux(%d0,3,^)]);@pemit %#=mysql(SELECT.POSE,pose_text,%q<scene>,elementsmux(%d0,1,^))};@pemit %#=footer()

@@ PLOT Section
&SWITCHES.PLOT.0 #scene=ADDHELPER|REMHELPER|ADDSCENE|REMSCENE

&SWITCHES.PLOT.5 #scene=CREATE|ADDRUNNER|REMRUNNER|TITLE|PITCH|OUTCOME|STARTED|ENDED

&Q.SELECT.PLOT #scene=SELECT ! FROM plot_view WHERE plot_id=?
&Q.SELECT.PLOT_SCENES #scene=SELECT scene_id FROM scene_plot WHERE plot_id=?

&FINDPLOT #scene=@assert/inline strlen(%0)=@pemit %#=No Plot ID entered!;@assert/inline isint(setr(!,mysql(SELECT.PLOT,plot_id,%0),%1))=@pemit %#=That isn't a valid Plot ID!;th setq(!,mysql(SELECT.PLOT,plot_title,%0),pname);

&FN.PLOTSCENE.COLUMNS #scene=printf($-4s $-20s $-10s $-15s $-15s,ID,Title,Status,Started,Finished)
&FN.PLOTSCENE.ROW #scene=printf($-4s $-20s $-10s $-15s $-15s,%0,mysql(SELECT.SCENE_VIEW,scene_title,%0),elementsmux(setr(!,mysql2(SELECT.SCENE_VIEW,scene_status_name[chr(44)]scene_date_started_secs[chr(44)]scene_date_activity_secs,%0),data),1,^),fancytime(elementsmux(%q<data>,2,^)),fancytime(elementsmux(%q<data>,3,^)))

&Q.SELECT.RUNNERS #scene=SELECT entity_objid,entity_name,runner_type_name FROM plot_runner_view WHERE plot_id=? ORDER BY runner_type ASC

&FN.PLOTRUNNER.COLUMNS #scene=printf($-30s $-20s,Name,Status)
&FN.PLOTRUNNER.ROW #scene=printf($-30s $-20s,if(isobjid(elementsmux(%0,1,^)),cname(elementsmux(%0,1,^)),elementsmux(%0,2,^)%B\(Deleted\)),elementsmux(%0,3,^))

&INC.PLOT.DISPLAY #scene=@attach %!/FINDPLOT=%0,plot;@pemit %#=header(Plot %q<plot>: '%q<pname>');@dolist/inline Start End={@if isint(setr(!,mysql(SELECT.PLOT,plot_date_[lcstr(%d0)]_secs,%q<plot>),timestamp))={@pemit %#=[ansi(hw,%d0 Date:)]%b[fancytime(%q<timestamp>)]}};@if strlen(setr(!,mysql2(SELECT.RUNNERS,%q<plot>),runners))={@pemit %#=ansi(confoverride(%#,COLUMN),u(FN.PLOTRUNNER.COLUMNS));@dolist/inline/delimit | %q<runners>={@pemit %#=u(FN.PLOTRUNNER.ROW,%d0)}};@dolist/inline Pitch Outcome={@if strlen(setr(!,mysql(SELECT.PLOT,plot_[lcstr(%d0)],%q<plot>),text))={@pemit %#=separator(%d0);@pemit %#=%q<text>}};@if words(setr(!,mysql(SELECT.PLOT_SCENES,%q<plot>),scenes))={@pemit %#=separator(Related Scenes);@pemit %#=ansi(confoverride(%#,COLUMN),u(FN.PLOTSCENE.COLUMNS));@dolist/inline %q<scenes>={@pemit %#=u(FN.PLOTSCENE.ROW,%d0)}};@pemit %#=footer()

&FN.PLOT.COLUMNS #scene=printf($-5s $-40s,ID,Title)
&FN.PLOT.ROW #scene=printf($-5s $-40s,%0,mysql(SELECT.PLOT,plot_title,%0))

&Q.SELECT.PLOTS #scene=SELECT plot_id FROM plot

&INC.PLOT.LIST #scene=@pemit %#=header(Plots);@pemit %#=ansi(confoverride(%#,COLUMN),u(FN.PLOT.COLUMNS));@if words(setr(!,mysql(SELECT.PLOTS),plots))={@dolist/inline %q<plots>={@pemit %#=u(FN.PLOT.ROW,%d0)}};@pemit %#=footer()

&SW.PLOT.MAIN #scene=@if strlen(%0)={@attach %!/INC.PLOT.DISPLAY},{@attach %!/INC.PLOT.LIST}

&MSG_PLOT #scene=@pemit/list [setunion(sql(SELECT entity_objid FROM plot_runner_view WHERE plot_id=%0 AND runner_type>=%1),%2)]=[ansi(c,PLOT %0:)] [gm_format(%3,##,%:)]
@@ %0 - PLOT id, %1 - minimum actor_type to display to, %2 - extra objids to send to. %3 - message.

&Q.INSERT.PLOT #scene=INSERT INTO plot (plot_title,plot_date_start) VALUES (?,FROM_UNIXTIME(?))
&Q.UPDATE.PLOT #scene=UPDATE plot SET !=? WHERE plot_id=?
&Q.UPDATE.PLOT.UNIXTIME #scene=UPDATE plot SET !=FROM_UNIXTIME(?) WHERE plot_id=?

&Q.INSERT.RUNNER #scene=INSERT INTO plot_runner (plot_id,entity_id,runner_type) VALUES (?,?,?) ON DUPLICATE KEY UPDATE runner_type=VALUES(runner_type)

&SW.PLOT.CREATE #scene=@attach #inc/CHECK_APP_GUEST;@assert/inline strlen(stripansi(%0))=@pemit %#=No plot title entered!;@attach #inc/DOSQL=INSERT.PLOT/plot,stripansi(%0),secs();@attach #inc/MSG_ALERT=Plot %q<plot> '[stripansi(%0)]' Created.

&Q.SELECT.RUNNER #scene=SELECT ! from plot_runner_view WHERE plot_id=? AND !=?
&Q.DELETE.RUNNER #scene=DELETE pr FROM plot_runner AS pr LEFT JOIN entity AS e on e.entity_id=pr.entity_id WHERE e.entity_objid=? AND pr.plot_id=?

&INC.CHANGEFIELD #scene=@attach %!/FINDPLOT=%0,plot;@assert/inline cor(gtebittype(%#,5),gte(mysql(SELECT.RUNNER,runner_type,%q<plot>,entity_objid,%:),%1))=@pemit %#=Permission denied.;@assert/inline cor(gtebittype(%#,5),!isint(mysql(SELECT.PLOT,plot_date_end_secs,%q<plot>)))=@pemit %#=Permission denied. The plot has ended.

&SW.PLOT.ADDRUNNER #scene=@attach %!/FINDPLOT=%0,plot;@attach #inc/GET_PLAYER=%1,t1;@break/inline eq(mysql(SELECT.RUNNER,%q<plot>,entity_objid,%q<t1>),2)=@pemit %#=[cname(%q<t1>)] is already a runner!;@attach #inc/DOSQL=INSERT.RUNNER,%q<plot>,u(FN.PREPENT,%q<t1>),2;@attach %!/MSG_PLOT=%q<plot>,0,%:,Added a Runner: [cname(%q<t1>)]

&SW.PLOT.REMRUNNER #scene=@attach %!/FINDPLOT=%0,plot;@attach #inc/GET_PLAYER=%1,t1;@assert/inline eq(mysql(SELECT.RUNNER,runner_type,%q<plot>,entity_objid,%q<t1>),2)=@pemit %#=[cname(%q<t1>)] is not a runner!;@attach %!/MSG_PLOT=%q<plot>,0,%:,Removed a Runner: [cname(%q<t1>)];@attach #inc/DOSQL=DELETE.RUNNER,%q<t1>,%q<plot>

&SW.PLOT.ADDHELPER #scene=@attach %!/INC.CHANGEFIELD=%0,2;@attach #inc/GET_PLAYER=%1,t1;@break/inline gt(mysql(SELECT.RUNNER,runner_type,%q<plot>,entity_objid,%q<t1>),0)=@pemit %#=[cname(%q<t1>)] is already a helper or runner!;@attach #inc/DOSQL=INSERT.RUNNER,%q<plot>,u(FN.PREPENT,%q<t1>),1;@attach %!/MSG_PLOT=%q<plot>,0,%:,Added a Helper: [cname(%q<t1>)]

&SW.PLOT.REMHELPER #scene=@attach %!/INC.CHANGEFIELD=%0,2;@attach #inc/GET_PLAYER=%1,t1;@assert/inline eq(mysql(SELECT.RUNNER,runner_type,%q<plot>,entity_objid,%q<t1>),1)=@pemit %#=[cname(%q<t1>)] is not a helper!;@attach %!/MSG_PLOT=%q<plot>,0,%:,Added a Helper: [cname(%q<t1>)];@attach #inc/DOSQL=DELETE.RUNNER,%q<t1>,%q<plot>;

&SW.PLOT.TITLE #scene=@attach %!/INC.CHANGEFIELD=%0,2;@assert/inline strlen(%1)=@pemit %#=No title entered!;@attach #inc/DOSQL=UPDATE.PLOT,plot_title,%1,%q<plot>;@attach %!/MSG_PLOT=%q<plot>,0,%:,Updated the Title.

&SW.PLOT.PITCH #scene=@attach %!/INC.CHANGEFIELD=%0,2;@assert/inline strlen(%1)=@pemit %#=No pitch entered!;@attach #inc/DOSQL=UPDATE.PLOT,plot_pitch,%1,%q<plot>;@attach %!/MSG_PLOT=%q<plot>,0,%:,Updated the Pitch.

&SW.PLOT.OUTCOME #scene=@attach %!/INC.CHANGEFIELD=%0,2;@assert/inline strlen(%1)=@pemit %#=No outcome entered!;@attach #inc/DOSQL=UPDATE.PLOT,plot_outcome,%1,%q<plot>;@attach %!/MSG_PLOT=%q<plot>,0,%:,Updated the Outcome.

&SW.PLOT.STARTED #scene=@attach %!/FINDPLOT=%0,plot;@attach #inc/VALID.TIME=%1;@attach #inc/DOSQL=UPDATE.PLOT.UNIXTIME,plot_date_start,%q<value>,%q<plot>;@attach %!/MSG_PLOT=%q<plot>,0,%:,Updated the Plot Start Date.

&SW.PLOT.ENDED #scene=@attach %!/FINDPLOT=%0,plot;@if strmatch(%1,NULL)={@attach #inc/DOSQL=UPDATE.PLOT,plot_date_end,SET_NULL},{@attach #inc/VALID.TIME=%1;@attach #inc/DOSQL=UPDATE.PLOT.UNIXTIME,plot_date_end,%q<value>,%q<plot>};@attach %!/MSG_PLOT=%q<plot>,0,%:,Updated the Plot End Date.

&Q.INSERT.SCENE_PLOT #scene=INSERT INTO scene_plot (plot_id,scene_id) VALUES (?,?)
&Q.DELETE.SCENE_PLOT #scene=DELETE FROM scene_plot WHERE plot_id=? AND scene_id=?

&SW.PLOT.ADDSCENE #scene=@attach %!/INC.CHANGEFIELD=%0,1;@attach %!/FINDSCENE=%1,scene;@break/inline match(mysql(SELECT.PLOT_SCENES,%q<plot>),%q<scene>)=@pemit %#=That scene is already part of the plot!;@attach #inc/DOSQL=INSERT.SCENE_PLOT,%q<plot>,%q<scene>;@attach %!/MSG_PLOT=%q<plot>,0,%:,Added Scene %q<scene>: '%q<sname>';@attach %!/MSG_SCENE=%q<scene>,0,%:,$you() added Scene to Plot %q<plot>: '%q<pname>'

&SW.PLOT.REMSCENE #scene=@attach %!/INC.CHANGEFIELD=%0,1;@attach %!/FINDSCENE=%1,scene;@assert/inline match(mysql(SELECT.PLOT_SCENES,%q<plot>),%q<scene>)=@pemit %#=That scene is not part of the plot!;@attach #inc/DOSQL=DELETE.SCENE_PLOT,%q<plot>,%q<scene>;@attach %!/MSG_PLOT=%q<plot>,0,%:,Removed Scene %q<scene>: '%q<sname>';@attach %!/MSG_SCENE=%q<scene>,0,%:,$you() removed Scene from Plot %q<plot>: '%q<pname>'

@@ Pose Recording

&I_@EMIT #hobj=[not(isdbref(tag(scene)))]
&I_SAY #hobj=[not(isdbref(tag(scene)))]
&I_POSE #hobj=[not(isdbref(tag(scene)))]
&I_P #hobj=[not(isdbref(tag(scene)))]
&I_S #hobj=[not(isdbref(tag(scene)))]

&HOOK.SCENE #hobj=@dolist/inline @emit say pose={@hook/ignore %d0}

&CMD.OVERRIDE #scene=$^(?s)(pose|semipose|say|@emit)(?\:/noeval)?(?\: +(.*))?$:@attach %!/OVERRIDE=%1,%2
@set #scene/CMD.OVERRIDE=regexp

&CMD.OVERRIDE2 #scene=$\:*:@attach %!/OVERRIDE=pose,%0
&CMD.OVERRIDE3 #scene=$\;*:@attach %!/OVERRIDE=semipose,%0
&CMD.OVERRIDE4 #scene=$"*:@attach %!/OVERRIDE=say,%0
&CMD.OVERRIDE5 #scene=$|*:@attach %!/OVERRIDE=@emit,%0

&Q.SELECT.SCENE_ACTIVE #scene=SELECT scene_id FROM scene WHERE scene_id=? AND scene_status=1

&CONFIG.SCENEBORDER.DESC #acc_parent=Show full header/footer around a recorded pose in SceneSys?
&CONFIG.SCENEBORDER.DEFAULT #acc_parent=1
&CONFIG.SCENEBORDER.TYPE #acc_parent=BOOL

&Q.INSERT.CHANNEL #scene=INSERT INTO channel (scene_id,channel_name,channel_objid,channel_category) VALUES (?,?,!,?)

&Q.SELECT.CHANNEl #scene=SELECT ! FROM channel WHERE scene_id=? AND channel_category=? AND channel_name=?

&Q.SELECT.ACTROLE #scene=SELECT actrole_id FROM actrole WHERE actor_id=? AND actrole_name=?

&Q.INSERT.ACTROLE #scene=INSERT INTO actrole (actor_id,actrole_name) VALUES (?,?)

&Q.INSERT.POSE #scene=INSERT INTO pose (actrole_id,channel_id,pose_date_created,pose_text) VALUES (!,?,FROM_UNIXTIME(?),?)

&Q.INCREMENT.ACTION_COUNT #scene=UPDATE actor SET action_count=action_count+1 WHERE actor_id=?

&GET_ACTROLE #scene=th setq(!,u(FN.PREPACT,%0,%1),actor);@skip isint(setr(!,mysql(SELECT.ACTROLE,%q<actor>,setr(!,strfirstof(stripansi(setr(!,get(%1/GAME.SCENE.ROLE),setrole)),name(%1)),actname)),role_id))={@attach #inc/DOSQL=INSERT.ACTROLE/role_id,%q<actor>,%q<actname>}
@@ %0 - scene id, %1 - actor objid.
&GET_CHANNEL #scene=@skip isint(setr(!,mysql(SELECT.CHANNEL,channel_id,%0,%1,%2),chan_id))={@attach #inc/DOSQL=INSERT.CHANNEL/chan_id,%0,%2,NULL,%1}
@@ %0 - scene id

@@ For normal roleplay actions. say, pose, @emit, etc.
&HANDLE_RECORD_ACTION #scene=@attach %!/GET_CHANNEL=%0,0,Actions;@attach %!/GET_ACTROLE=%0,%1;@attach #inc/DOSQL=INSERT.POSE/pose_id,%q<role_id>,%q<chan_id>,secs(),%2;@attach #inc/DOSQL=INCREMENT.ACTION_COUNT,%q<actor>;@attach #inc/DOSQL=UPDATE.SCENE.UNIXTIME,scene_date_activity,secs(),%q<scene>
@@ %0 - scene ID, %1 - actor objid, %2 - pose content.

@@ System messages which have a player source. Dice rolls, +meter, etc.
&HANDLE_RECORD_SYSTEM_ACTOR #scene=@attach %!/GET_CHANNEL=%0,2,%2;@attach %!/GET_ACTROLE=%0,%1;@attach #inc/DOSQL=INSERT.POSE/pose_id,%q<role_id>,%q<chan_id>,secs(),%3;@attach #inc/DOSQL=UPDATE.SCENE.UNIXTIME,scene_date_activity,secs(),%q<scene>
@@ %0 - scene id, %1 - actor objid, %2 - system name, %3 - pose content.

@@ System messages which came from... well, the system. They have no actor.
&HANDLE_RECORD_SYSTEM #scene=@attach %!/GET_SYSTEM_CHANNEL=%0,2,%1;@attach #inc/DOSQL=INSERT.POSE/pose_id,NULL,%q<chan_id>,secs(),%2;@attach #inc/DOSQL=UPDATE.SCENE.UNIXTIME,scene_date_activity,secs(),%q<scene>
@@ %0 - scene id, %1 - system name, %2 - pose content.

&SCENE_HEADER #scene=th setq(!,cname(%1)[if(strlen(%q<setrole>),%B\(as %q<setrole>\))],dname);th setq(!,[chr(91)][ansi(hg,Scene %0)][chr(93)] %q<dname>'s Pose [chr(91)][ansi(hg,%q<pose_id>)][chr(93)]%B>,disp);th setq(!,printf($^78s,%q<disp>),minimal);@dolist/inline setr(!,lcon(%l,CONNECT),recip)={@if accoption(%d0,SCENEBORDER)={@pemit %d0=subheader(%q<disp>,%d0)},{@pemit %d0=%q<minimal>}}

&SCENE_FOOTER #scene=@dolist/inline %q<recip>={@if accoption(%d0,SCENEBORDER)={@pemit %d0=footer(,%d0)}}

&OVERRIDE #scene=@assert/inline elock(%l/SpeechLock,%#)=@pemit %#=You may not express yourself here.;th setq(!,cand(isint(setr(!,get(%l/GAME.SCENE),scene)),mysql(SELECT.SCENE_ACTIVE,%q<scene>)),sceneactive);th setq(!,u(FN.OVERRIDE,%0,%1,%:,if(%q<sceneactive>,get(%#/GAME.SCENE.ROLE))),pose);@if %q<sceneactive>={@attach %!/HANDLE_RECORD_ACTION=%q<scene>,%:,%q<pose>;@attach %!/SCENE_HEADER=%q<scene>,%:};@remit %l=%q<pose>;@if t(%q<sceneactive>)={@attach %!/SCENE_FOOTER=%q<scene>,%:}

&FN.OVERRIDE #scene=parsestr(switch(%0,pose,:%1,semipose,;%1,say,"%1,@emit,|%1),%0,",",,&[if(strlen(%3),%3,cname(%2))])
@@ %0 type, %1 - message, %2 actor objid

&CMD.OSAY #scene=$^(?s)(?\:@|\+)?(osay|ooc)(?\: +(.*))?$:@attach %!/OSAY=%2
@set #scene/CMD.OSAY=regexp

&OSAY_RECORD #scene=@skip isint(setr(!,mysql(SELECT.CHANNEL,channel_id,%0,1,OOC),chan_id))={@attach #inc/DOSQL=INSERT.CHANNEL/chan_id,%0,OOC,NULL,1};th setq(!,u(FN.PREPACT,%0,%:),actor);@skip isint(setr(!,mysql(SELECT.ACTROLE,%q<actor>,setr(!,name(%:),actname)),role_id))={@attach #inc/DOSQL=INSERT.ACTROLE/role_id,%q<actor>,%q<actname>};@attach #inc/DOSQL=INSERT.POSE/pose_id,%q<role_id>,%q<chan_id>,secs(),%1;@attach #inc/DOSQL=UPDATE.SCENE.UNIXTIME,scene_date_activity,secs(),%q<scene>

&FN.OSAY #scene=parsestr(%0,%0,",",,&[cname(%1)])

&FN.OSAY_HEADER #scene=[ansi(hx,-<)][ansi(hr,OOC)][if(%0,[ansi(hx,:)]%B[ansi(hg,%1)])][ansi(hx,>-)]

&OSAY #scene=@assert/inline elock(%l/SpeechLock,%#)=@pemit %#=You may not express yourself here.;@assert/inline strlen(%0)=@pemit %#=Osay what?;@break/inline strmatch(%0,|*)=@pemit %#=Emits are disabled for osay.;th setq(!,u(FN.OSAY,%0,%:),pose);@if setr(!,cand(isint(setr(!,get(%l/GAME.SCENE),scene)),mysql(SELECT.SCENE_ACTIVE,%q<scene>)),sceneactive)={@attach %!/OSAY_RECORD=%q<scene>,%q<pose>};@remit %l=[u(FN.OSAY_HEADER,%q<sceneactive>,%q<scene>)] %q<pose>

@@ System Messages

&RECORD_SCENE #scene=@skip isint(setr(!,mysql(SELECT.CHANNEL,channel_id,%0,2,%2),chan_id))={@attach #inc/DOSQL=INSERT.CHANNEL/chan_id,%0,%2,NULL,2};@if isobjid(%1)={@skip isint(setr(!,mysql(SELECT.ACTROLE,%q<actor>,setr(!,name(%1),actname)),role_id))={@attach #inc/DOSQL=INSERT.ACTROLE/role_id,%q<actor>,%q<actname>}};@attach #inc/DOSQL=INSERT.POSE/pose_id,strfirstof(%q<role_id>,NULL),%q<chan_id>,secs(),%3
@@ %0 - scene ID, %1 - enactor objid if player, empty otherwise, %2 - system name, %3 - message

&RECORD_ROOM #scene=@if setr(!,cand(isint(setr(!,get(%l/GAME.SCENE),scene)),mysql(SELECT.SCENE_ACTIVE,%q<scene>)),sceneactive)={@attach %!/RECORD_SCENE=%q<scene>,%1,%2,%3}
@@ %0 - room dbref, %1 - enactor objid if player, empty otherwise, %2 - system name, %3 - message

@@ Help Files

&HLP.SCENE #scene=The +scene command is core to the latest version of SceneSys, our game's way of handling roleplay logging, plot tracking, and session scheduling. It covers the creation and administration of roleplay sessions, or 'scenes.'%R%R[ansi(hw,Command Aliases:)] +scene, +log, +rplogs, etc%R%R[ansi(hc,Usage Notes)]%RThe Local +OOC chat, IC actions \(such as say or @emit\), and system messages are logged by all who are in a room that a scene started in. To change rooms, /pause and re-/start a scene. Messages from channels and radio can also be logged, check relevant helpfiles.%R%R[ansi(hc,Scene Administration Commands)]%R[ansi(hw,+scene/create <title>\[=<pitch>\])]%R%TAll scenes must have a unique title (case insensitive.) They may optionally have a pitch, the broad strokes gist of what the scene's meant to be about.%R%R[ansi(hw,+scene/title <id>=<new title>)]%R%TChange a scene's title.%R%R[ansi(hw,+scene/pitch <id>=<new pitch>)]%R%TSet or change a scene's pitch.%R%R[ansi(hw,+scene/outcome <id>=<new outcome>)]%R%TSet or change a scene's outcome. This is a brief summary of how things went.%R%R[ansi(hw,+scene/start <id>)]%R%TStart a scene. It will bind the current room to it. Only one scene can be in a room at a time.%R%R[ansi(hw,+scene/pause <id>)]%R%TPause an ongoing scene. It will stop recording poses.%R%R[ansi(hw,+scene/finish <id>)]%R%TMark a scene as finished. Don't forget to set an outcome!%R%R[ansi(hc,Scene Scheduling)]%R[ansi(hw,+scene/schedule <date>/<title>=<pitch>)]%R%TLike /create, but it will assign a scheduled date to the scene that appears on the calendar. <date> must be a format recognized by the [ansi(hw,convtime\(\))] function such as Oct 12 17:00 2025.%R%R[ansi(hw,+scene/reschedule <id>=<date>)]%R%TReschedule a scene.%R%R[ansi(hw,+scene/tag <id>)]%R%T'Tag' a scheduled scene to show interest/claim a spot, however the scene runner chooses to consider it. Can [ansi(hw,/untag)] to reverse.%R%R[ansi(hw,+scene/upcoming)]%R%TDisplay all scheduled future scenes.%R%R[ansi(hc,Pose Management)]%R[ansi(hw,+scene/undo <poseID>)]%R%TStrike a pose from the record. Can also [ansi(hw,/redo)] it to reverse this.%R%R[ansi(hw,+scene/edit <poseID>=<search>^^^<replace>)]%R%TEdit a pose's text. This uses the logic of [ansi(hw,medit\(\))] under the hood.%R%R[ansi(hw,+scene/role \[<name>\])]%R%TCheck or change your role \(the name attached to your roleplayed actions.\) Useful for spoofing, NPCs, and complex character bits. Use [ansi(hw,+scene/role None)] to clear.%R%R[ansi(hc,Viewing Scene Logs)]%R[ansi(hw,+scene)]%R%TList all unfinished scenes you're a part of.%R%R[ansi(hw,+scene/old)]%R%TList all finished scenes you're a part of.%R%R[ansi(hw,+scene <id>)]%R%TDisplay information about a given scene.%R%R[ansi(hw,+scene/recall <id>\[=<actions>\])]%R%TDisplay <actions> \(10 if not entered\) of the last actions for a scene. Use actions=0 to view it all. \(Very spammy.\)%R%R[ansi(hw,+scene/with \[<name1>\[=<name2>\]\])]%R%TSee which scenes the given players have in common. The shortened form will fill missing name with yourself. IE: [ansi(hw,+scene/with Steve)] would list any you have in common with Steve. [ansi(hw,+scene/with Steve=Lily)] would show which scenes feature both Steve and Lily.%R%RSee also [ansi(hw,+help +plot)]
+help/add Communications/+scene=#scene/HLP.SCENE

&HLP.PLOT #scene=The +plot command organizes scene logs into greater groups for better handling of ongoing story arcs and major plots. Only staff may create them and appoint runners, but a runner can then manage them.%R[ansi(hc,Aliases:)]%B+plot, +plots%R%R[ansi(hc,Viewing Plots)]%R[ansi(hw,+plot)]%R%TView all plots.%R%R[ansi(hw,+plot <id>)]%R%TView details about a specific plot.%R%R[ansi(hc,Runner Commands)]%R[ansi(hw,+plot/addhelper <id>=<name>)]%R%TAppoint a helper, who can then add scenes to a plot. Can later [ansi(hw,+plot/remhelper)] using same syntax.%R%R[ansi(hw,+plot/addscene <plotID>=<sceneID>)]%R%TAdd a Scene to a plot. Scenes can belong to multiple plots. Can also use [ansi(hw,+plot/remscene)] with same syntax.%R%R[ansi(hw,+plot/started <id>=<date>)]%R%TMark the date where a plot is due to start.%R%R[ansi(hw,+plot/ended <id>=<date>)]%R%TMark the date where a plot ended.
+help/add Communications/+plot=#scene/HLP_PLOT

&SHLP.PLOT #scene=[ansi(hc,Administration Commands)]%R[ansi(hw,+plot/create <title>)]%R%TCreates a plot. Titles must be unique.%R%R[ansi(hw,+plot/addrunner <id>=<name>)]%R%TAssigns a runner to a plot. can also [ansi(hw,+plot/remrunner)] using same syntax.%R%R[ansi(hw,+plot/title <id>=<new title>)]%R%TChange a plot's title.%R%R[ansi(hw,+plot/pitch <id>=<new pitch)]%R%TChange a plot's pitch.%R%R[ansi(hw,+plot/outcome <id>=<new outcome>)]%R%TChange a plot's outcome.
+shelp/add Communications/+plot=#scene/SHLP.PLOT