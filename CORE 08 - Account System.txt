@skip isdbref(tag(setr(1,acc)))={@assert/inline isdbref(globalroom())=@pemit %#=ERROR: No master room set!;@assert/inline isdbref(setr(0,create(Account System,,t)))=@pemit %#=ERROR: Could not create code object %q1: %q0;@set %q0=SAFE SIDEFX INHERIT !NO_COMMAND;@tag/add %q1=%q0;@tel %q0=globalroom()}

&FUN_LIST_ACCOUNTS #acc=searchobjid(TOTEMS=A)
&FUN_FIND_ACCOUNT #acc=if(%1,namegrab(u(FUN_LIST_ACCOUNTS),%0),namefind(u(FUN_LIST_ACCOUNTS),%0))

&FUN_VALID_ACCOUNT_NAME #acc=ofparse(3,if(strlen(%0),1,#-1 ACCOUNT NAMES CANNOT BE EMPTY),if(!strmatch(%0,@*),1,#-1 ACCOUNT NAMES MAY NOT START WITH @),if(lte(strlen(%0),25),1,#-1 ACCOUNT NAMES MUST BE LESS THAN 26 CHARACTERS),if(valid(name,%0),1,#-1 ACCOUNT NAME CONTAINS INVALID FORMATTING),if(words(setdiff(u(FUN_FIND_ACCOUNT,stripansi(%0)),objid(%1))),#-1 ACCOUNT NAME IN USE,1))
@@ %0 - name to check. %1 - A dbref to exclude when checking for duplicates.

&FUN_CREATE_ACCOUNT #acc=privatize(1,if(isdbref(setr(0,create(%0,,t))),[null([tel(%q0,%!,1)][totemset(%q0,ACCOUNT)][set(%q0,SAFE)][attrpass(%q0/_PASSWORD,%1,SET)][iter(lattr(%!/FUN_CREATE_ACCOUNT_*),ulocal(%!/%i0,%0,%1))])][objid(%q0)],%q0))
@@ %0 - name to use. This should already have been validated. %1 - password to set. Also needs to have been used valid(password,%1) on it.

&FUN_SET_PASSWORD #acc=null(iter(%0 [u(FUN_CHARACTERS,%0)],attrpass(%i0/_PASSWORD,%1,SET)))
@@ %0 - dbref of account. %1 - password. needs to have already been validated.

&FUN_RANDOM_PASSWORD #acc=scramble(!@#$^&*0123456789[digest(md5,secs())])

&FUN_ADD_CHARACTER #acc=privatize(1,null([set(%0,CHARACTERS:[setunion(get(%0/CHARACTERS),objid(%1))])][set(%1,ACCOUNT:[objid(%0)])][set(%1,_PASSWORD:_%0/_PASSWORD)][iter(lattr(%!/FUN_ADD_CHARACTER_*),ulocal(%!/%i0,%0,%1))]))

&FUN_REMOVE_CHARACTER #acc=privatize(1,null(set(%0,CHARACTERS:[setdiff(get(%0/CHARACTERS),objid(%1))])[wipe(%1/ACCOUNT)][wipe(%1/_PASSWORD)][iter(lattr(%!/FUN_REMOVE_CHARACTER_*),ulocal(%!/%i0,%0,%1))]))

&FUN_CREATE_CHARACTER #acc=privatize(1,if(isdbref(setr(0,create(%1,u(FUN_RANDOM_PASSWORD),p))),[null([iter(lattr(%!/FUN_CREATE_CHARACTER_*),ulocal(%!/%i0,%0,%1))][u(FUN_ADD_CHARACTER,%0,%q0)])],%q0))
@@ %0 - dbref of account. %1 - name of character. Must've already been validated.


@@ Commands and stuff.
&CMD_@ACCOUNT #acc=$^(?s)(?\:@|\+)?(acc|account)(?\:/(\\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@attach #inc/GET_SWITCH=%2;@attach %!/SW_[strfirstof(%q<switch>,MAIN)]=trim(%3),%4
@set #acc/CMD_@ACCOUNT=regexp

&SWITCHES_0 #acc=EMAIL|OPTIONS|OPTION|RENAME|PASSWORD
&SWITCHES_4 #acc=BIND|UNBIND|UNBOUND|CREATE|LIST|INACTIVE
&SWITCHES_5 #acc=CONFIG

&SW_CONFIG #acc=@attach #inc/CONFIG=%0,trim(%1)

&CONFIG_PLAYERRENAME_DESC #acc=Players can manage rename their own accounts?
&CONFIG_PLAYERRENAME_DEFAULT #acc=0
&CONFIG_PLAYERRENAME_TYPE #acc=BOOL

&CONFIG_OPENCREATE_DESC #acc=Players can create new accounts at the login screen.
&CONFIG_OPENCREATE_DEFAULT #acc=1
&CONFIG_OPENCREATE_TYPE #acc=BOOL

&CONFIG_OPENPCREATE_DESC #acc=Players can create new characters at the login screen.
&CONFIG_OPENPCREATE_DEFAULT #acc=1
&CONFIG_OPENPCREATE_TYPE #acc=BOOL

&CONFIG_ALTLIMIT_DESC #acc=Maximum amount of characters per account. Only enforced at login menu.
&CONFIG_ALTLIMIT_DEFAULT #acc=16
&CONFIG_ALTLIMIT_TYPE #acc=POSINT

&CONFIG_EMAIL_DESC #acc=Can players set their own email addresses to accounts?
&CONFIG_EMAIL_DEFAULT #acc=1
&CONFIG_EMAIL_TYPE #acc=BOOL

&CONFIG_INACTIVE_DESC #acc=Days until an account is considered inactive when its characters haven't logged in.
&CONFIG_INACTIVE_DEFAULT #acc=30d
&CONFIG_INACTIVE_TYPE #acc=DURATION

@@ Options section.
&SW_OPTIONS #acc=@attach %!/SW_OPTION
&SW_OPTION #acc=@assert/inline isdbref(setr(!,get(%#/ACCOUNT),acc))=@pemit %#=You have no account set!;@if strlen(%0)={@attach %!/INC_OPSET=%0,%1,%q<acc>},{@attach %!/INC_OPLIST=%0,%1,%q<acc>}

&FUN_LIST_OPTIONS #acc=setunion(iter(lattr(%!/OP_*_*),elementsmux(%i0,2,_),%b,|),,|,|,i)

&INC_OPSET #acc=@attach #inc/PARTIAL=%0,u(FUN_LIST_OPTIONS),|,op,option;@attach #inc/VALID_[v(OP_%q<op>_TYPE)]=%1;th setq(!,getconf(%!,%q<op>),oldvalue);@set %2=OP_%q<op>_VALUE:%q<value>;@attach %!/OP_%q<op>_TRIGGER=%q<oldvalue>,%q<newvalue>,%2;@pemit %#=[cname(%!)] %q<op> is now: %q<valueformat>

&INC_OPLIST #acc=@pemit %#=header([ansi(hw,Account Options:)] [cname(%2)]);@dolist/inline/delimit | [u(FUN_LIST_OPTIONS)]={@pemit %#=separator(%d0);@pemit %#=v(OP_%d0_DESC);@pemit %#=[ansi(hw,TYPE:)] [v(OP_%d0_TYPE)];@pemit %#=[ansi(hw,DEFAULT:)] [v(OP_%d0_DEFAULT)];@pemit %#=[ansi(hw,CURRENT:)] [getconf(%!,%d0)]};@pemit %#=footer(To set: [ansi(hw,@acc/option <option>=<value>)])

&OP_TIMEZONE_DESC #acc=Timezone to use for accounts.
&OP_TIMEZONE_DEFAULT #acc=UTC
&OP_TIMEZONE_TYPE #acc=TIMEZONE

&OP_SCREENREADER_DESC #acc=Using a screenreader. Simplifies text output. Please contact staff if something isn't screenreader friendly.
&OP_SCREENREADER_DEFAULT #acc=0
&OP_SCREENREADER_TYPE #acc=BOOL

&OP_BORDER_DESC #acc=Color for header/footer/boxes.
&OP_BORDER_DEFAULT #acc=
&OP_BORDER_TYPE #acc=COLOR

&OP_HDRSTAR_DESC #acc=Color for header *
&OP_HDRSTAR_DEFAULT #acc=
&OP_HDRSTAR_TYPE #acc=COLOR

&OP_HDRTEXT_DESC #acc=Color for header text
&OP_HDRTEXT_DEFAULT #acc=
&OP_HDRTEXT_TYPE #acc=COLOR

@@ Account management switches.

&INC_ACCOUNT #acc=@assert/inline isdbref(setr(!,account(%0),%1))=@pemit %#=ERROR: [cname(%0)] has no valid account set.

&INC_ACCPLAYER #acc=@assert/inline strlen(%0)=@pemit %#=ERROR: No player or account name entered.;@if strmatch(%0,@*)={@assert/inline isdbref(setr(!,u(FUN_FIND_ACCOUNT,after(%0,@),1),%1))=@pemit %#=ERROR: Account '%0' not found.},{th setq(!,%#,%1);@attach #inc/GET_PLAYER=%#,%1;@attach %!/INC_ACCOUNT=r(%1),%1}
@@ %0 - string to look for. %1 - register to load results into.

&FUN_CHARACTERS #acc=sortname(filterobjid(get(%0/CHARACTERS)))
@@ %0 - dbref/objid of account.

&SW_MAIN #acc=@attach %!/INC_ACCPLAYER=if(cand(strlen(%0),gtebittype(%#,4)),trim(%0),%#),acc;@pemit %#=header([ansi(hw,Account:)] [cname(%q<acc>)]);@pemit %#=ansi(g,u(FUN_ACC_COLUMNS));@pemit %#=subheader();@dolist/inline [u(FUN_CHARACTERS,%q<acc>)]=@pemit %#=u(FUN_ACC_ROW,%d0);@pemit %#=footer()

&FUN_ACC_COLUMNS #acc=printf($-5s $-3s $-2s $-4s $-s $s,Dbref,Bit,Al,Mail,Name)

&FUN_ACC_ROW #acc=printf($-5s $3s $2s $-4:0:s $-s $s,num(%d0),bittype(%0),default(%0/ALTS,0),umail(%0),cname(%0))

&SW_CREATE #acc=@assert/inline setr(!,u(FUN_VALID_ACCOUNT_NAME,%0),res)=@pemit %#=ERROR: %q<res>;@assert/inline valid(password,%1)=@pemit %#=ERROR: Cannot use provided password: '%1'.;@assert/inline isobjid(setr(!,u(FUN_CREATE_ACCOUNT,%0,%1),acc))=@pemit %#=ERROR: %q<acc>;@if has_markup(%0)={@name/ansi %q<acc>=%0};@pemit %#=Account '[cname(%q<acc>)]' created with password: %1;@attach #inc/MSG_ALERT=Account '[cname(%q<acc>)]' created.

&FUN_MAX_BITTYPE #acc=lmax(iter(filterobjid(get(%0/CHARACTERS)),bittype(%i0)))

&INC_CANMODIFY #acc=th setq(!,strmatch(objid(account(%#)),objid(%0)),accsame);th setq(!,u(FUN_MAX_BITTYPE,%0),maxbit);@assert/inline cor(%q<accsame>,gtbittype(%#,%q<maxbit>),gtebittype(%#,6))=@pemit %#=Permission denied.

&SW_RENAME #acc=@assert/inline cor(getconf(%!,PLAYERRENAME),gtebittype(%#,4))=@pemit %#=Permission denied.;@if gtebittype(%#,4)={@attach %!/INC_ACCPLAYER=%0,acc;@attach %!/DO_RENAME=%q<acc>,%1},{@attach %!/INC_ACCOUNT=%#,acc;@attach %!/DO_RENAME=%q<acc>,%0}

&DO_RENAME #acc=@attach %!/INC_CANMODIFY=%0;@assert/inline setr(!,u(FUN_VALID_ACCOUNT_NAME,%1,%0),res)=@pemit %#=ERROR: %q<res>;th setq(!,cname(%0),oldname);@if has_markup(%1)={@name/ansi %0=%1},{@name %0=%1};@pemit %#=Your account has been renamed from '%q<oldname>' to: [cname(%0)].;@attach #inc/MSG_ALERT=Account '%q<oldname>' renamed to: [cname(%0)]
@@ %0 - target account, %1 - new name

&SW_PASSWORD #acc=@if gtebittype(%#,4)={@attach %!/INC_ACCPLAYER=%0,acc},{@attach %!/INC_ACCOUNT=%#,acc;@assert/inline attrpass(%q<acc>/_PASSWORD,%0,CHK)=@pemit %#=Provided old password does not match.};@attach %!/DO_PASSWORD=%q<acc>,%1

&DO_PASSWORD #acc=@attach %!/INC_CANMODIFY=%0;@assert/inline valid(password,%1)=@pemit %#=ERROR: Provided new password is not acceptable. Try another.;th u(FUN_SET_PASSWORD,%0,%1);@pemit %#=Password changed.;@if !%q<accsame>={@attach #inc/MSG_ALERT=Changed password of Account: [cname(%0)]}
@@ %0 - target account, %1 - new password.

&SW_BIND #acc=@attach #inc/GET_PLAYER=%0,t1;@assert/inline cor(gte(bittype(%#),bittype(%q<t1>)),gtebittype(%#,6))=@pemit %#=Permission denied.;@attach %!/INC_ACCPLAYER=%1,acc;@break/inline strmatch(account(%q<t1>),objid(%q<acc>))=@pemit %#=[cname(%q<t1>)] already belongs to [cname(%q<acc>)].;@if isdbref(setr(!,account(%q<t1>),exist))={@attach %!/DO_UNBIND=%q<exist>,%q<t1>,0};@attach %!/DO_BIND=%q<acc>,%q<t1>;@pemit %#=You added '[cname(%q<t1>)]' to account '[cname(%q<acc>)]'

&DO_BIND #acc=th u(FUN_ADD_CHARACTER,%0,%1);@pemit %1=You have been added to account '[cname(%1)]';@attach #inc/MSG_ALERT=Added '[cname(%1)]' to Account: '[cname(%0)]'
@@ %0 - account, %1 - character objid

&SW_UNBIND #acc=@attach #inc/GET_PLAYER=%0,t1;@assert/inline cor(gte(bittype(%#),bittype(%q<t1>)),gtebittype(%#,6))=@pemit %#=Permission denied.;@assert/inline isdbref(setr(!,account(%q<t1>),acc))=@pemit %#=[cname(%q<t1>)] does not belong to any account.;@attach %!/DO_UNBIND=%q<acc>,%q<t1>,1;@pemit %#=You removed '[cname(%q<t1>)]' from account '[cname(%q<acc>)]'

&DO_UNBIND #acc=th u(FUN_REMOVE_CHARACTER,%0,%1);@if %2={@pemit %1=You have been removed from account '[cname(%1)]';@attach #inc/MSG_ALERT=Removed '[cname(%1)]' from Account: '[cname(%0)]'}
@@ %0 - account, %1 - character objid, %2 - announce.

&SW_UNBOUND #acc=@pemit %#=header(Account-less Characters);@dolist/inline sortname(searchobjid(EPLAYER=\[!isdbref(account(##))\]))=@pemit %#=[cname(%d0)] %(%d0%);@pemit %#=footer()

&SW_LIST #acc=@pemit %#=header(Accounts);@pemit %#=u(FUN_ACCLIST_COLUMNS);@pemit %#=subheader();@dolist/inline u(FUN_LIST_ACCOUNTS)={@pemit %#=u(FUN_ACCLIST_ROW,%d0)};@pemit %#=footer()

&FUN_ACCLIST_COLUMNS #acc=printf($-5s $-25s $s,Dbref,Name,Characters)
&FUN_ACCLIST_ROW #acc=printf($-5s $-25s $s,num(%0),cname(%0),iter(u(FUN_CHARACTERS,%0),cname(%i0),%b,\,%B))

&FIL_INACTIVE #acc=

&FUN_INACTIVE_ACCOUNTS #acc=filter(%!/FIL_INACTIVE,u(FUN_LIST_ACCOUNTS),%b,%b,stringsecs(getconf(%!,INACTIVE)))

&SW_INACTIVE #acc=@pemit %#=header(Inactive Accounts);@pemit %#=u(FUN_INACTIVE_COLUMNS);@pemit %#=subheader();@dolist/inline u(FUN_INACTIVE_ACCOUNTS)={@pemit %#=u(FUN_INACTIVE_ROW,%d0)};@pemit %#=footer(Inactive Total: [words(%q<inactive>)])

&FUN_INACTIVE_COLUMNS #acc=COLUMNS
&FUN_INACTIVE_ROW #acc=