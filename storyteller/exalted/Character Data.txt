&CONFIG.LOSTLUNARCASTES.DESC #stdata=Enable the lost Lunar Castes?
&CONFIG.LOSTLUNARCASTES.DEFAULT #stdata=0
&CONFIG.LOSTLUNARCASTES.TYPE #stdata=BOOL

&ATTRIBUTES.PHYSICAL #stdata=Strength|Dexterity|Stamina
&ATTRIBUTES.SOCIAL #stdata=Charisma|Manipulation|Appearance
&ATTRIBUTES.MENTAL #stdata=Perception|Intelligence|Wits
&ATTRIBUTES #stdata=[u(ATTRIBUTES.PHYSICAL)]|[u(ATTRIBUTES.SOCIAL)]|[u(ATTRIBUTES.MENTAL)]

&ATTRIBUTES_MAX #stdata=10
&ATTRIBUTES_GETTAG #stdata=get_kv(get(%0/ST.ATTRIBUTES.TAGGED),%1,0)
&TAG.ATTRIBUTES #stdata=@attach %!/DO_TAG=%0,%1,%2,ATTRIBUTES,ATTRIBUTES,Attribute,Attributes

&ABILITIES_GETTAG #stdata=get_kv(get(%0/ST.ABILITIES.TAGGED),%1,0)
&TAG.ABILITIES #stdata=@attach %!/DO_TAG=%0,%1,%2,ABILITIES,ABILITIES,Ability,Abilities

&STYLES #stdata=getconf(%!,STYLES)

&SPLAT.X.MORTAL #stdata=Warrior|Priest|Broker|Savant|Rogue
&SPLAT.X.MORTAL.NAME #stdata=Profession

&SPLAT.X.EXALT/SOLAR #stdata=Dawn|Zenith|Eclipse|Twilight|Night
&SPLAT.X.EXALT/SOLAR.NAME #stdata=Caste

&SPLAT.X.EXALT/ABYSSAL #stdata=Dusk|Midnight|Moonshadow|Daybreak|Day
&SPLAT.X.EXALT/ABYSSAL.NAME #stdata=Caste

&SPLAT.X.EXALT/SIDEREAL #stdata=Journeys|Serenity|Battles|Secrets|Endings
&SPLAT.X.EXALT/SIDEREAL.NAME #stdata=Caste

&SPLAT.X.EXALT/ALCHEMICAL #stdata=Orichalcum|Moonsilver|Jade|Starmetal|Soulsteel|Adamant
&SPLAT.X.EXALT/ALCHEMICAL.NAME #stdata=Caste

&SPLAT.X.EXALT/DRAGON-BLOODED #stdata=Fire|Earth|Air|Wood|Water
&SPLAT.X.EXALT/DRAGON-BLOODED.NAME #stdata=Aspect

&SPLAT.X.EXALT/LUNAR #stdata=Full Moon|[if(getconf(%!,LOSTLUNARCASTES),Waxing Moon|Half Moon|Waning Moon,Changing Moon)]|No Moon|Casteless
&SPLAT.X.EXALT/SIDEREAL.NAME #stdata=Caste

&SET.ABILITIES #stdata=@attach %!/DO_STATLIKE=%0,%1,%2,ABILITIES,ABILITIES,Ability,Abilities,1
&SET.STYLES #stdata=@attach %!/DO_STATLIKE=%0,%1,%2,STYLES,STYLES,Style,Styles,1

&SET.CASTE #stdata=@attach %!/DO_SPLAT=%0,%1,%2,X,Caste

&ADVANTAGES #stdata=Essence|Willpower

&SET.ADVANTAGES #stdata=@attach %!/DO_STATLIKE=%0,%1,%2,ADVANTAGES,ADVANTAGES,Advantage,Advantages,0

&DO_CHARMS #stdata=@assert/inline strlen(%1)=@pemit %#=No Charm Type category entered!;@attach #inc/PARTIAL=%1,capnames(iter(lattr(%!/CHARMS.*),after(%i0,_),%b,|)),|,type,Charm Type;@assert/inline strlen(%2)=@pemit %#=No %q<type> Charm category entered!;@attach #inc/PARTIAL=%2,u(CHARMS.%q<type>),|,category,%q<type> Charm Category;@assert/inline setr(!,u(FN.VALID_WORDPOWER,%3,CHARM),res)=@pemit %#=That's not a valid Charm name: %q<res>;@assert/inline isint(%4)=@pemit %#=Must enter a value to modify the Charm by!;@attach %!/HANDLE_WORDPOWER=%0,%3,%4,edit(ST.CHARMS.%q<type>.%q<category>,%B,_);th setq(!,[ansi(hc,capnames(%q<type> %q<category> Charm:))] [ansi(hw,capnames(%3))],tname);@if lte(%q<newvalue>,0)={@attach %!/REPORT=%0,Removed all counts of %q<tname>},{@attach %!/REPORT=%0,Now counting [ansi(hg,%q<newvalue> purchase[if(gt(%q<newvalue>,1),s)])] of %q<tname>}
@@ %0 - target character, %1 - major category, %2 - secondary category, %3 - charm name, %4 - value to modify by.

&ADD.NATIVE #stdata=@assert/inline strlen(setr(!,get(%0/ST.TEMPLATE),template))=@pemit %#=Set a template first!;@assert/inline strlen(setr(!,u(NATIVE.TYPE,%0),native))=@pemit %#=No native Charms for a %q<template>;@attach %!/DO_CHARMS=%0,%q<native>,%1,before(%2,~),mul(if(%3,-1,1),strfirstof(after(%2,~),1))
&REM.NATIVE #stdata=@attach %!/ADD_NATIVE=%0,%1,%2,1
@@ %0 - target character, %1 - charm category, %2 charm name., %3 reverse sign

&ADD.CHARM #stdata=@attach %!/DO_CHARMS=%0,elementsmux(%1,1,|),elementsmux(%1,2,|),before(%2,~),mul(if(%3,-1,1),strfirstof(after(%2,~),1))
&REM.CHARM #stdata=@attach %!/ADD_CHARM=%0,%1,%2,1
@@ %0 - target character, %1 - major category|secondary category, %2 - charm name, %3 - reverse sign

&FN.VALID_EVOSTYLE #stdata=ofparse(3,if(strlen(%0),1,#-1 NO %1 CATEGORY NAME ENTERED),if(!contains_character(%0,.),1,#-1 A %1 CATEGORY NAME MAY NOT CONTAIN PERIODS),if(valid(attrname,ST.%2.%0,%b,_),1,#-1 INVALID AS AN ATTRIBUTE. TRY REMOVING SPECIAL CHARACTERS LIKE :),1)

&DO_EVOSTYLE #stdata=@assert/inline strlen(%1)=@pemit %#=No %5 entered!;@if words(%6,|)={@attach #inc/PARTIAL=%1,%6,|,category,%5},{th setq(!,trim(%1),category)};@assert/inline setr(!,u(FN.VALID_EVOSTYLE,%q<category>,%5,%4),res)=@pemit %#=That's not a good name for a %5: %q<res>;@assert/inline setr(!,u(FN.VALID_WORDPOWER,%2,%5),res)=@pemit %#=That's not a valid Charm name: %q<res>;@assert/inline isint(%3)=@pemit %#=Must enter a value to modify the Charm by!;@attach %!/HANDLE_WORDPOWER=%0,%2,%3,edit(ST.%4.%q<category>,%B,_)
@@ %0 - target character, %1 - artifact or style name, %2 - charm name, %3 - value to modify by, %4 - root attr, %5 - singular name of %1, %6 - choices. if not provided, will do normal validation.

&DO_STYLECHARM #stdata=@attach %!/DO_EVOSTYLE=%0,%1,%2,%3,STYLECHARMS,Style,u(STYLES);th setq(!,[ansi(hc,capnames(%q<category> Charm:))] [ansi(hw,capnames(%2))],tname);@if lte(%q<newvalue>,0)={@attach %!/REPORT=%0,Removed all counts of %q<tname>},{@attach %!/REPORT=%0,Now counting [ansi(hg,%q<newvalue> purchase[if(gt(%q<newvalue>,1),s)])] of %q<tname>}
@@ %0 - target character, %1 - artifact name, %2 - charm name, %3 - value to modify by.

&ADD.STYLECHARM #stdata=@attach %!/DO_STYLECHARM=%0,elementsmux(%1,1,|),before(%2,~),mul(if(%3,-1,1),strfirstof(after(%2,~),1))
&REM.STYLECHARM #stdata=@attach %!/ADD_STYLECHARM=%0,%1,%2,1

&SORCERY_CIRCLES #stdata=Terrestrial|Celestial|Solar

&DO_SORCERY #stdata=@attach %!/DO_EVOSTYLE=%0,%1,%2,%3,SORCERY,Spell,u(SORCERY_CIRCLES);th setq(!,[ansi(hc,capnames(%q<category> Circle Sorcery Spell:))] [ansi(hw,capnames(%2))],tname);@if lte(%q<newvalue>,0)={@attach %!/REPORT=%0,Removed all counts of %q<tname>},{@attach %!/REPORT=%0,Now counting [ansi(hg,%q<newvalue> purchase[if(gt(%q<newvalue>,1),s)])] of %q<tname>}
&ADD.SORCERY #stdata=@attach %!/DO_SORCERY=%0,elementsmux(%1,1,|),before(%2,~),mul(if(%3,-1,1),strfirstof(after(%2,~),1))
&REM.SORCERY #stdata=@attach %!/ADD_SORCERY=%0,%1,%2,1

&DO_NECROMANCY #stdata=@attach %!/DO_EVOSTYLE=%0,%1,%2,%3,NECROMANCY,Spell,u(NECROMANCY_CIRCLES);th setq(!,[ansi(hc,capnames(%q<category> Circle Necromancy Spell:))] [ansi(hw,capnames(%2))],tname);@if lte(%q<newvalue>,0)={@attach %!/REPORT=%0,Removed all counts of %q<tname>},{@attach %!/REPORT=%0,Now counting [ansi(hg,%q<newvalue> purchase[if(gt(%q<newvalue>,1),s)])] of %q<tname>}
&ADD.NECROMANCY #stdata=@attach %!/DO_NECROMANCY=%0,elementsmux(%1,1,|),before(%2,~),mul(if(%3,-1,1),strfirstof(after(%2,~),1))
&REM.NECROMANCY #stdata=@attach %!/ADD_NECROMANCY=%0,%1,%2,1

&FN.QUICK_BASE #stdata=Template~TEMPLATE|Caste~CASTE

@@ Sheet Templates
&FN.SHEET_TEMPINFO_MORTAL #stdata=u(FN.SHEET_TEMPINFO,%0,%1,%2,NAME~Name|SEX~Sex,ADVANTAGES_ESSENCE~Essence~1|SPLAT.X~Profession~N/A)
&FN.SHEET_TEMPINFO_SOLAR #stdata=u(FN.SHEET_TEMPINFO,%0,%1,%2,NAME~Name|SEX~Sex,ADVANTAGES_ESSENCE~Essence~1|SPLAT.X~Caste~N/A)
&FN.TEMPINFO_ABYSSAL #stdata=u(FN.TEMPINFO_MAIN,%0,%1,%2,NAME~Name|SEX~Sex,ADVANTAGES_ESSENCE~Essence~1|SPLAT.X~Caste~N/A)
&FN.SHEET_TEMPINFO_DRAGON-BLOODED #stdata=u(FN.SHEET_TEMPINFO,%0,%1,%2,NAME~Name|SEX~Sex|SPLAT.X~Aspect~N/A,ADVANTAGES_ESSENCE~Essence~1|FIELD_NATION~Nation~Outcaste|FIELD_HOUSE~House~None)
&FN.SHEET_TEMPINFO_LUNAR #stdata=u(FN.SHEET_TEMPINFO,%0,%1,%2,NAME~Name|SEX~Sex|FIELD_ANIMAL~Animal~None,ADVANTAGES_ESSENCE~Essence~1|SPLAT.X~Caste~N/A)
&FN.TEMPINFO_ALCHEMICAL #stdata=u(FN.TEMPINFO_MAIN,%0,%1,NAME~Name|SPLAT.X~Caste~N/A,ADVANTAGES_ESSENCE~Essence~1|NATION~Nation~None)
&FN.TEMPINFO_SIDEREAL #stdata=u(FN.TEMPINFO_MAIN,%0,%1,%2,NAME~Name|SEX~Sex,ADVANTAGES_ESSENCE~Essence~1|SPLAT.X~Caste~N/A)

@@ Sheet Rendering
&SHEET_ABILITIES #stdata=th setq(!,setdiff(iter(setr(!,get(%0/ST.ABILITIES),abil),before(%i0,~),|,|),u(ABILITIES),|,|),exabil);th setq(!,iter(setr(!,get(%0/ST.ABILITIES.TAGGED),tags),before(%i0,~),|,|),tagged);th setq(!,setunion(u(ABILITIES),setunion(%q<exabil>,%q<tagged>,|,|),|,|),allabil);th setq(!,iter(%q<allabil>,%i0~[get_kv(%q<abil>,%i0,0)]~0~[u(ABILITIES_GETTAG,%0,%i0)],|,|),prepabil);th setq(!,filter(FIL.SHOULDSHOW,%q<prepabil>,|,|),finabil);@attach %!/SHEET_DOSTATS=%0,%1,%2,Abilities,%q<finabil>,ST.ABILITIES,ABILITY

&SHEET_CHARMS #stdata=@dolist/inline sort(lattr(%0/ST.CHARMS.*))={@skip strmatch(%q<last>,setr(!,capnames(elementsmux(%d0,2,.)),last))={@pemit %#=u(FN.SHEET_HEADER,%0,%1,%2,%q<last> Charms)};@pemit %#=u(FN.SHEET_SECTION,%0,%1,%2,capnames(edit(elementsmux(%d0,3,.),_,%B)));@attach %!/SHEET_RENDERWORDS=%0,%1,%2,get(%0/%d0),1~14~22~24~3 15~29~36~38~2 30~999~60~64~1,CHARM}

&SHEET_MAGIC #stdata=@if words(setr(!,sort(lattr(%0/ST.%3.*)),attrs))={@pemit %#=u(FN.SHEET_HEADER,%0,%1,%2,capnames(strfirstof(%5,%3)));@dolist/inline %q<attrs>={@skip strmatch(%q<last>,setr(!,capnames(edit(elementsmux(%d0,2,.),_,%B)),last))={@pemit %#=u(FN.SHEET_SECTION,%0,%1,%2,%q<last>%4)};@attach %!/SHEET_RENDERWORDS=%0,%1,%2,get(%0/%d0),1~14~22~24~3 15~29~36~38~2 30~999~60~64~1,%3}}

&SHEET_SORCERY #stdata=@attach %!/SHEET_MAGIC=%0,%1,%2,Sorcery,%BCircle Spells

&SHEET_NECROMANCY #stdata=@attach %!/SHEET_MAGIC=%0,%1,%2,Necromancy,%BCircle Spells

&SHEET_POOLTRACKXP #stdata=@pemit %#=u(FN.SHEET_TRIPLE_HEADER,%0,%1,%2,Pools,Tracks,Experience);th setq(!,floor(fdiv(sub(%2,4),3)),col1);th setq(!,ceil(fdiv(sub(%2,4),3)),col2);th setq(!,ceil(fdiv(sub(%2,4),3)),col3);@pemit %#=u(FN.SHEET_TRIPLE_COLUMNS,%0,%1,%2,u(FN.FORMAT_RESOURCES,%0,Pool),u(FN.FORMAT_RESOURCES,%0,Track),,%q<col1>,%q<col2>,%q<col3>)

&FN.GETSERIES #stdata=switch(%1,SOLAR,ansi(hy,Solars):%B[ansi(hy,The Lawgivers)],ABYSSAL,ansi(hx,Abyssals):%B[ansi(hx,The Deathknights)],INFERNAL,ansi(hg,Infernals):%B[ansi(hg,The Green Sun Princes)],LUNAR,ansi(hc,Lunars):%B[ansi(hc,The Stewards)],SIDEREAL,ansi(hm,Sidereals):%B[ansi(hm,The Viziers)],DRAGON-BLOODED,ansi(hr,Terrestrials):%B[ansi(hr,The Dragon-Blooded)],ALCHEMICAL,ansi(c,Alchemicals):%B[ansi(c,The Champions)],JADEBORN,ansi(y,Jadeborn),RAKSHA,ansi(m,Raksha):%B[ansi(m,The Fair Folk)],MORTAL,Mortals:%BThe Heroes,GHOST,Ghosts,DRAGON-KING,Dragon-Kings,GOD-BLOODED,ansi(h,GOD-BLOODED):%B[ansi(h,The Children of the Mighty)],Exalted 3e)

&SHEET_STYLECHARMS #stdata=@attach %!/SHEET_MAGIC=%0,%1,%2,StyleCharms,,Style Charms

@@ Sheet Styling
&SOLAR_BORDER #stdata=if(hasflag(%#,XTERMCOLOR),220,y)
&SOLAR_HEADER_BORDER #stdata=if(hasflag(%#,XTERMCOLOR),196,hr)
&SOLAR_HEADER_NAME #stdata=if(hasflag(%#,XTERMCOLOR),222,hy)
&SOLAR_SECTION_NAME #stdata=if(hasflag(%#,XTERMCOLOR),222,y)
&SOLAR_SECTION_BORDER #stdata=if(hasflag(%#,XTERMCOLOR),196,hr)

&SOLAR_ABILITY_FILL #stdata=if(hasflag(%#,XTERMCOLOR),220,y)
&SOLAR_ABILITY_DOTS #stdata=if(hasflag(%#,XTERMCOLOR),215,y)
&SOLAR_ABILITY_NAME #stdata=if(hasflag(%#,XTERMCOLOR),202,y)
&SOLAR_ABILITY_BONUS #stdata=if(hasflag(%#,XTERMCOLOR),121,g)
&SOLAR_ABILITY_PENALTY #stdata=if(hasflag(%#,XTERMCOLOR),197,r)

@@ Sheet help
&HELP.NATIVE #stdata=Native Charms. For a Solar, this would be Solar Charms. This exists as a shortcut to Charms|<template>.%R%R[if(strmatch(%#,num(%q<target>)),Your,cname(%q<target>)'s)] available Native Charm categories: [ansi(hw,strfirstof(elist(u(CHARMS.[get(%#/ST.TEMPLATE)]),,|),Nothing!))]

&HELP.CHARMS #stdata=The Charms of the Exalted and other beings. Charms are subdivided by Major Type and a Subcategory.%R%RType and Category support partial matching, but there is [ansi(hr,NO)] database of Charms. The system will accept any charm names you type, within reason. So, unfortunately, you must type out Blazing Solar Bolt and Ox-Body Technique and etc. Don't worry about capitalization, though. Our system will normalize it.%R%R[ansi(hc,Examples:)]%R[ansi(hw,add Charm|Solar|Melee=Blazing Solar Bolt)]%RThe lazy version: [ansi(hw,add cha|so|mel=blazing solar bolt)]%R[ansi(hw,add Charm|Solar|Resistance=Ox-Body Technique~5)] would add 5 purchases of Ox-Body at once.%R[ansi(hw,rem cha|sol|res=ox-body technique~4)] would then remove 4 of them.%R%R[ansi(hc,Notes:)]%RThe [ansi(hw,Native)] option is a shortcut to Charm|<type> based on the character being edited. If a Solar is targeted, then it's Solar Charms, etc. So you could [ansi(hw,add nat|mel=blazing solar bolt)] just as easily.%R%RBelow are the available choices for such in TYPE: <subcategories> format.%R%R[iter(sort(u(GATHER,CHARMS),i,|,|),ansi(hw,%i0): [elist(u(CHARMS.%i0),,|)],|,%R%R)]

&HELP.SORCERY #stdata=Sorcery Spells.%R%R[ansi(hc,Examples:)]%R[ansi(hw,add Sorcery|Terrestrial=Demon of the First Circle)]%R[ansi(hw,add Sorcery|Celestial=Magma Kraken)]%R%R[ansi(hw,Circles:)] [elist(u(SORCERY_CIRCLES),,|)]

&HELP.NECROMANCY #stdata=Necromancy Spells.%R%R[ansi(hc,Examples:)]%R[ansi(hw,add Necromancy|Ivory=Summon Ghost)]%R[ansi(hw,add Necromancy|Shadow=Forest of Ivory Razors)]%R%R[ansi(hw,Circles:)] [elist(u(NECROMANCY_CIRCLES),,|)]


@@ Resources
&RES_PERSONAL.TYPE #stdata=Pool
&RES_PERSONAL.UNIT_NAME #stdata=Mote
&RES_PERSONAL.UNIT_NAME_PLURAL #stdata=Motes
&RES_PERSONAL.UNIT.TYPE #stdata=Personal Essence
&RES_PERSONAL.MAX #stdata=u(PERSONAL.[get(%0/ST.TEMPLATE)])
&RES_PERSONAL.INIT #stdata=u(RES_PERSONAL.MAX,%0)
&RES_PERSONAL.OPTIONS #stdata=SPEND GAIN REFRESH COMMIT

&RES_PERIPHERAL.TYPE #stdata=Pool
&RES_PERIPHERAL.UNIT_NAME #stdata=Mote
&RES_PERIPHERAL.UNIT_NAME_PLURAL #stdata=Motes
&RES_PERIPHERAL.UNIT.TYPE #stdata=Peripheral Essence
&RES_PERIPHERAL.MAX #stdata=u(PERIPHERAL.[get(%0/ST.TEMPLATE)])
&RES_PERIPHERAL.INIT #stdata=u(RES_PERIPHERAL.MAX,%0)
&RES_PERIPHERAL.OPTIONS #stdata=SPEND GAIN REFRESH COMMIT

&RES_WILLPOWER.TYPE #stdata=Pool
&RES_WILLPOWER.UNIT_NAME #stdata=Point
&RES_WILLPOWER.UNIT_NAME_PLURAL #stdata=Points
&RES_WILLPOWER.UNIT.TYPE #stdata=Willpower
&RES_WILLPOWER.MAX #stdata=get_kv(%0/ST.ADVANTAGES,Willpower,0)
&RES_WILLPOWER.INIT #stdata=u(RES_WILLPOWER.MAX,%0)
&RES_WILLPOWER.OPTIONS #stdata=SPEND GAIN REFRESH COMMIT

&RES_LIMIT.TYPE #stdata=Track
&RES_LIMIT.UNIT_NAME #stdata=Point
&RES_LIMIT.UNIT_NAME_PLURAL #stdata=Points
&RES_LIMIT.UNIT.TYPE #stdata=Limit
&RES_LIMIT.INIT #stdata=0
&RES_LIMIT.OPTIONS #stdata=SPEND GAIN COMMIT

&GET_ESSENCE #stdata=get_kv(get(%0/ST.ADVANTAGES),Essence)


&PERSONAL.ABYSSAL #stdata=u(PERSONAL.SOLAR,%0)
&PERIPHERAL.ABYSSAL #stdata=u(PERIPHERAL.SOLAR,%0)

&PERSONAL.INFERNAL #stdata=u(PERSONAL.SOLAR,%0)
&PERIPHERAL.INFERNAL #stdata=u(PERIPHERAL.SOLAR,%0)