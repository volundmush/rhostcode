@skip isdbref(tag(setr(1,bbs_parent)))={@assert/inline isdbref(tag(stor))=@pemit %#=ERROR: No storage object set!;@assert/inline isdbref(setr(0,create(BBS Parent,,t)))=@pemit %#=ERROR: Could not create code object %q1: %q0;@set %q0=INDESTRUCTIBLE NO_COMMAND;@tag/add %q1=%q0;@tel %q0=#stor}

@lock/user #bbs_parent|ReadLock=LK.TRUE/1
@lock/user #bbs_parent|PostLock=LK.TRUE/1
@lock/user #bbs_parent|AdminLock=LK.GTEBITTYPE/5

&GETID #bbs_parent=u(ORDER)

&CONFIG.PERM #bbs_parent=@assert/inline elock(%2/user|AdminLock,%#)=@pemit %#=Permission denied.

&CONFIG.ISANONYMOUS.DESC #bbs_parent=Non-Board Admin see the ANONYMOUS name instead of normal poster?
&CONFIG.ISANONYMOUS.DEFAULT #bbs_parent=0
&CONFIG.ISANONYMOUS.TYPE #bbs_parent=BOOL

&CONFIG.ANONYMOUS.DESC #bbs_parent=The name to use in Anonymous mode.
&CONFIG.ANONYMOUS.DEFAULT #bbs_parent=Anonymous
&CONFIG.ANONYMOUS.TYPE #bbs_parent=WORD

&CONFIG.MANDATORY.DESC #bbs_parent=Whether a Board is mandatory reading for those who can see it. A Mandatory board is immune to +bbcatchup and nags users.
&CONFIG.MANDATORY.DEFAULT #bbs_parent=0
&CONFIG.MANDATORY.TYPE #bbs_parent=BOOL
&CONFIG.MANDATORY.PERM #bbs_parent=@assert/inline gtebittype(%#,5)=@pemit %#=Permission denied. Only Admin may set a board Mandatory.

&CONFIG.REPLIES.DESC #bbs_parent=Allow +bbreply on the board? Disabling this will not clear existing threads.
&CONFIG.REPLIES.DEFAULT #bbs_parent=1
&CONFIG.REPLIES.TYPE #bbs_parent=BOOL

&CONFIG.TIMEOUT.DESC #bbs_parent=The amount of seconds a post can exist before it will be auto-cleaned.
&CONFIG.TIMEOUT.DEFAULT #bbs_parent=7776000
&CONFIG.TIMEOUT.TYPE #bbs_parent=DURATION

&CONFIG.USETIMEOUT.DESC #bbs_parent=Enable the timeout system for this board?
&CONFIG.USETIMEOUT.DEFAULT #bbs_parent=1
&CONFIG.USETIMEOUT.TYPE #bbs_parent=BOOL

@skip isdbref(tag(setr(1,bbs_fparent)))={@assert/inline isdbref(tag(stor))=@pemit %#=ERROR: No storage object set!;@assert/inline isdbref(setr(0,create(BBS Faction Parent,,t)))=@pemit %#=ERROR: Could not create code object %q1: %q0;@set %q0=INDESTRUCTIBLE NO_COMMAND;@tag/add %q1=%q0;@tel %q0=#stor;@parent %q0=[tag(bbs_parent)]}

&GETID #bbs_fparent=[getconf(loc(%!),ABBREVIATION)][u(ORDER)]

&LK.MYFACMEMBERS #bbs_fparent=[facismember(loc(%!),%:)]
&LK.MYFACLEADERS #bbs_fparent=[lte(facgetrank(loc(%!,%:)),2)]
&LK.MYFACLTERANK #bbs_fparent=[lte(facgetrank(loc(%!,%:)),%1)]

@lock/user #bbs_fparent|ReadLock=LK.MYFACMEMBERS/1
@lock/user #bbs_fparent|PostLock=LK.MYFACMEMBERS/1
@lock/user #bbs_fparent|AdminLock=LK.MYFACLEADERS/1

@skip isdbref(tag(setr(1,bbs)))={@assert/inline isdbref(globalroom())=@pemit %#=ERROR: No glogbal room set!;@assert/inline isdbref(setr(0,create(Public Bulletin Boards,,t)))=@pemit %#=ERROR: Could not create code object %q1: %q0;@set %q0=INDESTRUCTIBLE !NO_COMMAND;@tag/add %q1=%q0;@tel %q0=[globalroom()]}

&REG_BOARD_ID #bbs=([A-Za-z]+)?(\d+)

&FN.SORTBOARDS #bbs=sortby(#lambda/[lit(comp(get(%0/ORDER),get(%1/ORDER)))],%0)

&FN.GETBOARDS #bbs=u(FN.SORTBOARDS,filter(#lambda/[lit(hasattr(%0/ORDER))],lcon(%0,OBJECT,,,1)))

&FN.BOARDS #bbs=squish(iter(#bbs[if(isdbref(tag(fac)),%B[sortname(u(#fac/FN.FACTIONS,1))])],u(FN.GETBOARDS,%i0)))

&FIL.CANREAD #bbs=cor(elock(%0/user|ReadLock,num(%1)),if(%2,,u(FIL.CANPOST,%0,%1)))
&FIL.CANPOST #bbs=cor(elock(%0/user|PostLock,num(%1)),if(%2,,u(FIL.CANADMIN,%0,%1)))
&FIL.CANADMIN #bbs=elock(%0/user|AdminLock,num(%1))

&FN.FILTER_BOARDS #bbs=filter(%!/FIL.CAN%1,if(strlen(%2),%2,u(FN.BOARDS)),%b,%b,%0)

&FN.BOARD_IDS #bbs=iter(if(strlen(%0),%0,u(FN.BOARDS)),[u(%i0/GETID)]~%i0,%b,|)

&FN.GETBOARD #bbs=after(grab(%0,%1~*,|),~)

&CMD.@BBS #bbs=$^(?s)(?\:@|\+)?bb(create|rename|order|delete|options|config|list|read|post|reply|edit|remove|write|proof|toss|leave|join|next|new|scan|catchup|lock|unlock|examine|timeout)?(?\:/(\\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:th setq(!,u(FN.BOARDS),boards);th setq(!,u(FN.FILTER_BOARDS,%:,READ,%q<boards>),visiboards);th setq(!,u(FN.BOARD_IDS,%q<visiboards>),visiboardids);@attach %!/SW.[strfirstof(%1,WRITE)]=trim(%3),%4,rest(%0)
@set #bbs/CMD.@BBS=regexp

&CONFIG.PERM #bbs=@assert/inline gtebittype(%#,5)=@pemit %#=Permission denied.

&CONFIG.TIMEOUTS.DESC #bbs=Enable/disable the Timeout system for all boards.
&CONFIG.TIMEOUTS.DEFAULT #bbs=1
&CONFIG.TIMEOUTS.TYPE #bbs=BOOL

&CONFIG.MANINTERVAL.DESC #bbs=Interval between Mandatory checks?
&CONFIG.MANINTERVAL.DEFAULT #bbs=7200
&CONFIG.MANINTERVAL.TYPE #bbs=DURATION

&CONFIG.BREAD.DESC #bbs=Enable the joke +bread command?
&CONFIG.BREAD.DEFAULT #bbs=1
&CONFIG.BREAD.TYPE #bbs=BOOL

&SW.CONFIG #bbs=@attach #inc/CONFIG=%0,%1,%!

&CMD.BREAD #bbs=$^(?s)(?\:@|\+)?b(read)?(?\:/(\\S+)?)?(?\: +(.+?))?(?\:=(.*))?$:@if getconf(%!,BREAD)={@break/inline hasflag(%#,DARK)=@pemit %#=Whoops! Did you mean [ansi(+bbread)]?;@remit %l=The sky grows dark... %k looks up...%r%rAnd is [ansi(hru,BURIED)] in falling bread. Pumpernickel\, white\, whole wheat\, bagels\, rolls\, banana\, the whole nine yards.%r%rNext time\, use [ansi(hw,+bbread)]},{@pemit %#=error()}
@set #bbs/CMD.BREAD=regexp

&SW.CREATE #bbs=@assert/inline strlen(%0)=@pemit %#=No board id entered!;th setq(!,,abbr);th setq(!,,ord);@assert/inline regmatchi(%0,v(REG_BOARD_ID),-1 abbr ord);@if strlen(%q<abbr>)={@assert/inline isobjid(setr(!,u(#fac/FN.GETABBR,%q<abbr>),fac))=@pemit %#=Sorry but '%q<abbr>' did not match an abbreviated Faction.;@assert/inline lte(facgetrank(%q<fac>,%:),2)=@pemit %#=Permission denied. Only Leaders and Seconds can create Faction boards.},{@assert/inline gtebittype(%#,5)=@pemit %#=Permission denied. Only Wizards may create public boards.};@attach #inc/VALID.POSINT=%q<ord>,Board Order;@break/inline isobjid(u(FN.GETBOARD,u(FN.BOARD_IDS,%q<boards>),%0))=@pemit %#=ERROR: BoardID conflict detected.;@assert/inline strlen(%1)=@pemit %#=No board name entered!;@assert/inline valid(name,trim(stripansi(%1)))=@pemit %#=That's not a good name for a Board.;@assert/inline isdbref(setr(!,create(trim(stripansi(%1)),,t),board))=@pemit %#=Error Creating Board: %q<board>;@set %q<board>=INDESTRUCTIBLE;@parent %q<board>=[tag(if(isdbref(%q<fac>),bbs_fparent,bbs_parent))];@set %q<board>=ORDER:%q<ord>;@tel %q<board>=[if(isdbref(%q<fac>),%q<fac>,tag(bbs))];@if has_markup(%1)={@name/ansi %q<board>=[trim(%1)]};@pemit %#=Board '%0: %1' Created.;@attach #inc/MSG_ALERT=Board '%0: %1' Created.

&FINDBOARD #bbs=@assert/inline strlen(%0)=@pemit %#=Must enter a board!;@assert/inline isobjid(setr(!,u(FN.GETBOARD,%q<visiboardids>,%0),%1))=@pemit %#=That didn't match a board!;@if hastotem(loc(r(%1)),FACTION)={th setq(!,objid(loc(r(%1))),%1fac)}

&FN.ADMIN #bbs=if(isobjid(%2),lte(facgetrank(%2,%0),2),gtebittype(%0,5))

&BOARD_ADMIN #bbs=@attach %!/FINDBOARD=%0,board;@assert/inline u(FN.ADMIN,%#,%q<board>,%q<boardfac>)=@pemit %#=Permission denied.

&SW.RENAME #bbs=@attach %!/BOARD_ADMIN;@assert/inline strlen(%1)=@pemit %#=Must enter a new board name!;@assert/inline valid(name,stripansi(trim(%1)))=@pemit %#=That's not a good name for a board.;th setq(!,cname(%q<board>),oldname);@name/ansi %q<board>=%1;@pemit %#=Renamed Board '[u(%q<board>/GETID)]: %q<oldname>' to: [cname(%q<board>)];@attach #inc/MSG_ALERT=Renamed Board '[u(%q<board>/GETID)]: %q<oldname>' to: [cname(%q<board>)]

&SW.ORDER #bbs=@attach %!/BOARD_ADMIN;@attach #inc/VALID.POSINT=%1,Board Order;@assert/inline lmax(iter(u(FN.GETBOARDS,strfirstof(%q<boardfac>,%!)),eq(get(%i0/ORDER),%q<value>)))=@pemit %#=There is a Board with a conflicting Order in the [if(isdbref(%q<boardfac>),cname(%q<boardfac>),cname(%!))].;th setq(!,get(%q<board>/ORDER),old);@pemit %#=Order of Board '[u(%q<board>/GETID)]: [cname(%q<board>)]' changed to: %q<value>;@attach #inc/MSG_ALERT=Order of Board '[u(%q<board>/GETID)]: [cname(%q<board>)]' changed to: %q<value>;@set %q<board>=ORDER:%q<value>

&SW.DELETE #bbs=@attach %!/BOARD_ADMIN;@assert/inline strmatch(%1,setr(!,cname(%q<board>),oldname))=@pemit %#=You must verify this by entering the name exactly as the second argument.;th setq(!,u(%q<board>/GETID),bid);@attach %!/DO_DELETE=objid(%q<board>);@pemit %#=Board '%q<bid>: %q<oldname>' deleted.;@attach #inc/MSG_ALERT=Board '%q<bid>: %q<oldname>' deleted.

&DO_DELETE #bbs=@set %0=!INDESTRUCTIBLE;@destroy/override %0;@dolist/inline searchngobjid(EVAL=\[attrcnt(##/BBS.[edit(%0,:,_)]_*)\])={@wipe %d0/BBS.[edit(%0,:,_)]_*}

&SW.OPTIONS #bbs=@attach %!/BOARD_ADMIN=trim(before(%0,/));@attach #inc/CONFIG=trim(after(%0,/)),%1,%q<board>

&SW.LOCK #bbs=@attach %!/BOARD_ADMIN=trim(before(%0,/)),board;@attach #inc/PARTIAL=after(%0,/),ReadLock|PostLock|AdminLock,|,lock;@attach #inc/VALID.LOCKKEY=%1;@lock/user %q<board>|%q<lock>=%q<value>;@pemit %#=Changed %q<lock> on Board '[u(%q<board>/GETID)]: [cname(%q<board>)]' to: %q<value>;@attach #inc/MSG_ALERT=Changed %q<lock> on Board '[u(%q<board>/GETID)]: [cname(%q<board>)]' to: %q<value>

&SW.UNLOCK #bbs=@attach %!/BOARD_ADMIN=trim(before(%0,/)),board;@attach #inc/PARTIAL=after(%0,/),ReadLock|PostLock|AdminLock,|,lock;@unlock/user %q<board>|%q<lock>;@pemit %#=Restored Default Lock on Board '[u(%q<board>/GETID)]: [cname(%q<board>)]';@attach #inc/MSG_ALERT=Restored Default Lock on Board '[u(%q<board>/GETID)]: [cname(%q<board>)]'

&SW.EXAMINE #bbs=@attach %!/BOARD_ADMIN;@pemit %#=header([u(%q<board>/GETID)]: [cname(%q<board>)]);@pemit %#=[ansi(hw,Objid:)] %q<board>;@pemit %#=[if(setr(!,hastotem(loc(%q<board>),FACTION),isfac),Belongs to Faction: [cname(setr(!,loc(%q<board>),fac))],Is a Public Board.)];@dolist/inline ReadLock PostLock AdminLock={@pemit %#=%d0: [lock(%q<board>/user|%d0)] [if(strmatch(lock(%q<board>/user|%d0),lock(parent(%q<board>)/user|%d0)),\(*DEFAULT*\))]};@pemit %#=footer()

&FN.LIST_COLUMNS #bbs=ansi(confoverride(%#,COLUMN),printf($-7s $-30s $-22s $-5s $-5s $-5s,BrdID,Name,Member,#Mess,#Unrd,Perm))

&FN.PERMDISP #bbs=[if(elock(%0/user|ReadLock,%1),r,%b)][if(elock(%0/user|PostLock,%1),p,%B)][if(elock(%0/user|AdminLock,%1),a,%b)]

&FN.LIST_ROW #bbs=printf($-7s $-30s $-22s $-5s $-5s $-5s,u(%0/GETID),cname(%0),if(u(FIL.SUBSCRIBED,%0,%#),Yes,No),words(setr(!,get(%0/POSTS),posts)),words(setdiff(%q<posts>,get(strfirstof(account(%#),%#)/BBS.[edit(objid(%0),:,_)].READ))),u(FN.PERMDISP,%0,%#))

&SW.LIST #bbs=@pemit %#=header(mudname() BBS - Board Listing);@pemit %#=u(FN.LIST_COLUMNS);@if words(%q<visiboards>)={@dolist/inline %q<visiboards>={@if !strmatch(%q<last>,setr(!,loc(%d0),last))={@pemit %#=separator(if(hastotem(%q<last>,FACTION),cname(%q<last>),Public) Boards)};@pemit %#=u(FN.LIST_ROW,%d0)}};@pemit %#=footer()

&FN.READBOARDS_COLUMNS #bbs=ansi(confoverride(%#,COLUMN),printf($-7s $-30s $-22s $-5s $-5s $-5s,BrdID,Name,Last Post,#Mess,#Unrd,Perm))

&FN.READBOARDS_ROW #bbs=printf($-7s $-30s $-22s $-5s $-5s $-5s,u(%0/GETID),cname(%0),if(hasattr(%0/LASTPOST),fancytime(get(%0/LASTPOST)),None),words(setr(!,get(%0/POSTS),posts)),words(setdiff(%q<posts>,get(strfirstof(account(%#),%#)/BBS.[edit(objid(%0),:,_)].READ))),u(FN.PERMDISP,%0,%#))

&FIL.SUBSCRIBED #bbs=get_kv(get(%1/BBS.[edit(objid(%0),:,_)]_OPTIONS),Subscribed,1)

&INC.READ_BOARDS #bbs=@pemit %#=header(mudname() BBS - Boards);@pemit %#=u(FN.READBOARDS_COLUMNS);@if words(setr(!,filter(FIL.SUBSCRIBED,%q<visiboards>,%b,%b,strfirstof(account(%#),%#)),sboards))={@dolist/inline %q<sboards>={@if !strmatch(%q<last>,setr(!,loc(%d0),last))={@pemit %#=separator(if(hastotem(%q<last>,FACTION),cname(%q<last>),Public) Boards)};@pemit %#=u(FN.READBOARDS_ROW,%d0)}};@pemit %#=footer()

&FN.READBOARD_COLUMN #bbs=ansi(confoverride(%#,COLUMN),printf($-7s $-2s $-24s $-20s $-21s,ID,Rd,Title,PostDate,Author))

&FN.READBOARD_ROW #bbs=printf($-7s $-2s $-24s $-20s $-21s,%3/%0,if(!match(%4,%0),U),after(setr(!,get(%1/P_%0_HDR),hdr),^),fancytime(get_kv(before(%q<hdr>,^),PostDate)),if(getconf(%0,ISANONYMOUS),if(%5,getconf(%0,ANONYMOUS)%B\([cname(get_kv(before(%q<hdr>,^),Author))]\),getconf(%0,ANONYMOUS)),cname(get_kv(before(%q<hdr>,^),Author))))

&INC.READ_BOARD #bbs=@attach %!/FINDBOARD=%0,board;@pemit %#=header(if(isdbref(%q<boardfac>),cname(%q<boardfac>),Public) Boards - [setr(!,u(%q<board>/GETID),boardid)]: [cname(%q<board>)]);@pemit %#=u(FN.READBOARD_COLUMN);@if words(setr(!,get(%q<board>/POSTS),posts))={th setq(!,elock(%q<board>/user|AdminLock,%#),boardmin);th setq(!,get(strfirstof(account(%#),%#)/BBS.[edit(objid(%q<board>),:,_)].READ),read);@dolist/inline %q<posts>={@pemit %#=u(FN.READBOARD_ROW,%d0,%q<board>,%q<boardfac>,%q<boardid>,%q<read>,%q<boardmin>)}};@pemit %#=footer()

&FN.NAMEDELETED #bbs=if(isobjid(%0),cname(%0),%1 \(Deleted\))

&DO_DISPLAY #bbs=@pemit %#=header(if(hastotem(loc(%0),FACTION),cname(loc(%0)),Public) Board - [u(%0/GETID)]: [cname(%0)]);th setq(!,get(%0/P_%1_HDR),hdr);th setq(!,before(%q<hdr>,^),data);th setq(!,after(%q<hdr>,^),title);@pemit %#=ljust(Message: [u(%0/GETID)]/%1,35)Posted[space(14)]Author%r[ljust(%q<title>,35)][ljust(fancytime(get_kv(%q<data>,Postdate)),20)][ljc(if(getconf(%0,ISANONYMOUS),if(u(FIL.CANADMIN,%0,%#),getconf(%0,ANONYMOUS)%B\([u(FN.NAMEDELETED,get_kv(%q<data>,Author),get_kv(%q<data>,AuthorName))]\),getconf(%0,ANONYMOUS)),u(FN.NAMEDELETED,get_kv(%q<data>,Author),get_kv(%q<data>,AuthorName))),21)]%R[separator()];@pemit %#=get(%0/P_%1_BDY);@pemit %#=footer();th setq(!,strfirstof(account(%#),%#),target);@set %q<target>=[setr(!,BBS_[edit(objid(%0),:,_)].READ,attr)]:[setunion(setinter(get(%0/POSTS),get(%q<target>/%q<attr>)),%1)]
@@ %0 - board, %1 - post ID.

&INC.READ_POST #bbs=@attach %!/FINDBOARD=trim(before(%0,/)),board;@assert/inline match(get(%q<board>/POSTS),setr(!,trim(after(%0,/)),post))=@pemit %#=Post '%q<post>' not found.;@attach %!/DO_DISPLAY=%q<board>,%q<post>

&SW.READ #bbs=@if strlen(%0)={@if strmatch(%0,*/*)={@attach %!/INC.READ_POST},{@attach %!/INC.READ_BOARD}},{@attach %!/INC.READ_BOARDS}

&DO_CHECK #bbs=@assert/inline u(FIL.CANPOST,%0,%#)=@pemit %#=Cannot post to that board!;@assert/inline strlen(%1)=@pemit %#=No title entered for the post!;@assert/inline strlen(%2)=@pemit %#=There is no text in your post!;@assert/inline if(strlen(%3),match(get(%0/POSTS),%3),1)=@pemit %#=That thread no longer exists!;@break/inline gte(words(get(%0/POSTS)),3000)=@pemit %#=That board is at capacity!;@if strlen(%3)={@set %0=[setr(!,P_[before(%3,.)]_NEXTID,attr)]:[setr(!,inc(get(%0/%q<attr>)),postid)];th setq(!,[before(%3,.)].%q<postid>,postid)},{@set %0=NEXTID:[setr(!,inc(get(%0/NEXTID)),postid)]};@trigger #bbs/DO_POST=%0,%:,%q<postid>,%1,%2,%3;

&INC.FINISH_POST #bbs=@assert/inline hasattr(%#/BBS.CURRENT.TITLE)=@pemit %#=You are not writing a post!;@attach %!/DO_CHECK=get(%#/BBS.CURRENT.BOARD),get(%#/BBS.CURRENT.TITLE),get(%#/BBS.CURRENT.BODY),get(%#/BBS.CURRENT.REPLY);@wipe %#/BBS.CURRENT.*

&FIL.SUBSCRIBED2 #bbs=cand(u(FIL.CANREAD,%1,%0),u(FIL.SUBSCRIBED,%1,strfirstof(account(%0),%0)))

&DO_POST #bbs=@set %0=POSTS:[setunion(get(%0/POSTS),%2)];@set %0=LASTPOST:[secs()];@set %0=P_%2_HDR:Author~%1|PostDate~[get(%0/LASTPOST)]|Modified~[get(%0/LASTPOST)]|AuthorName~[name(%1)][if(!strmatch(%2,*.*),|Timeout~[add(get(%0/LASTPOST),getconf(%0,TIMEOUT))])]^%3;@if strmatch(%2,*.*)={@set %0=P_[before(%5,.)]_HDR:[set_kv(before(setr(!,get(%0/P_[before(%5,.)]_HDR),par),^),Timeout,add(get(%0/LASTPOST),getconf(%0,TIMEOUT)))]^[after(%q<par>,^)]};@set %0=P_%2_BDY:%4;@set [strfirstof(account(%1),%1)]=BBS_[edit(objid(%0),:,_)].READ:[setunion(setinter(get(strfirstof(account(%1),%1)/BBS.[edit(objid(%0),:,_)].READ),get(%0/POSTS)),%2)];@skip [t(%6)]={@dolist/inline [filter(FIL.SUBSCRIBED2,lwhoid(),%b,%b,%0)]={@pemit %d0=[ansi(c,BBS:)]%BNew BB [if(strlen(%5),reply,message)] ([u(%0/GETID)]/%2) posted to '[cname(%0)]' by [if(getconf(%0,ISANONYMOUS),if(u(FIL.CANADMIN,%0,%1),getconf(%0,ANONYMOUS)%B\([getconf(%0,ANONYMOUS)]\),getconf(%0,ANONYMOUS)),cname(%1))]: %3}}
@@ %0 - Board, %1 - author objid, %2 - post id, %3 - post title, %4 - post body, %5 - post reply to?, %6 - don't announce.

&INC.START_POST #bbs=@if strlen(%0)={@break/inline hasattr(%#/BBS.CURRENT.TITLE)=@pemit %#=You are already writing a post! Use +bbpost without arguments to post\, +bbproof to view\, +bbtoss to cancel\.;@attach %!/FINDBOARD=before(%0,/),board;@assert/inline u(FIL.CANPOST,%q<board>,%#)=@pemit %#=Permission denied.;@if [t(%2)]={@assert/inline match(get(%q<board>/POSTS),setr(!,trim(after(%0,/)),post))=@pemit %#=Post '%q<post>' not found.;th setq(!,RE: [setr(!,after(get(%q<board>/P_%q<post>_HDR),^),otitle)],title)},{@assert/inline strlen(setr(!,trim(after(%0,/)),title))=@pemit %#=Must provide a post title!};@set %#=BBS.CURRENT.TITLE:%q<title>;@set %#=BBS.CURRENT.BOARD:%q<board>;@if [t(%2)]={@set %#=BBS.CURRENT.REPLY:%q<post>};@pemit %#=You have begun writing a [if(%2,reply to [u(%q<board>/GETID)]/%q<post>: %q<otitle>., new message on [cname(%q<board>)]: %q<title>.)]. Use [ansi(hw,+bb <text>)] to append text. Use [ansi(hw,+bbproof)] to view current progress. Use [ansi(hw,+bbtoss)] to cancel. When finished use [ansi(hw,+bbpost)] by itself to post.},{@attach %!/INC.FINISH_POST}

&SW.POST #bbs=@if strlen(%1)={@if strmatch(%0,*/*)={@attach %!/FINDBOARD=before(%0,/),board;@assert/inline u(FIL.CANPOST,%q<board>,%#)=@pemit %#=Permission denied.;@attach %!/DO_CHECK=%q<board>,trim(after(%0,/)),%1},{@pemit %#=ERROR: That's not how you post a message!}},{@attach %!/INC.START_POST=%0,%1,0}

&SW.REPLY #bbs=@if strlen(%1)={@if strmatch(%0,*/*)={@attach %!/FINDBOARD=before(%0,/),board;@assert/inline u(FIL.CANPOST,%q<board>,%#)=@pemit %#=Permission denied.;@assert/inline match(get(%q<board>/POSTS),setr(!,trim(after(%0,/)),post))=@pemit %#=Post '%q<post>' not found.;@attach %!/DO_CHECK=%q<board>,RE: [after(get(%q<board>/P_%q<post>_HDR),^)],%1,%q<post>},{@pemit %#=ERROR: That's not how you post a message!}},{@attach %!/INC.START_POST=%0,%1,1}

&INC.CANMODIFY #bbs=@attach %!/FINDBOARD=%0,board;@assert/inline u(FIL.CANPOST,%q<board>,%#)=@pemit %#=Permission denied.;@assert/inline match(get(%q<board>/POSTS),setr(!,%1,post))=@pemit %#=Post '%q<post>' not found.;th setq(!,graball(get(%q<board>/POSTS),[before(%q<post>,.)].*),replies);th setq(!,iter(%q<replies>,after(%i0,.)),fibers);@assert/inline cor(u(FIL.CANADMIN,%q<board>,%#),strmatch(%:,get_kv(before(get(%q<board>/P_%q<post>_HDR),^),Author)))=@pemit %#=Permission denied.;@break/inline cand(strmatch(%q<post>,*.*),!cor(u(FIL.CANADMIN,%q<board>,%#),eq(after(%q<post>,.),lmax(%q<fibers>))))=@pemit %#=Only the latest reply can be %2.;
@@ %0 - board to find., %1 - post, %2 - action

&SW.EDIT #bbs=@assert/inline strlen(%0)=@pemit %#=What will you edit?;@if strmatch(%0,*/*)={@attach %!/INC.CANMODIFY=trim(before(%0,/)),trim(after(%0,/)),edited;@assert/inline strlen(before(%1,^^^))=@pemit %#=No search pattern entered.;@set %q<board>=P_%q<post>_BDY:[setr(!,medit(get(%q<board>/P_%q<post>_BDY),before(%1,^^^),after(%1,^^^)),results)];@set %q<board>=[set_kv(before(setr(!,get(%q<board>/P_%q<post>_HDR),hdr),^),Modified,secs())]^[after(%q<hdr>,^)];@pemit %#=Post edited. Results:%R%q<results>},{@attach #inc/PARTIAL=%0,BODY|TITLE,|,choice;@assert/inline strlen(before(%1,^^^))=@pemit %#=No search pattern entered.;@break/inline cand(strmatch(TITLE,%q<choice>),hasattr(%#/BBS.CURRENT.REPLY))=@pemit %#=Cannot change Title of a +bbreply.;@set %#=BBS.CURRENT.%q<choice>:[setr(!,medit(get(%#/BBS.CURRENT.%q<choice>),before(%1,^^^),after(%1,^^^)),results)];@pemit %#=Post-in-progress edited. New %q<choice> is:%R%q<results>}

&DO_REMOVE #bbs=@dolist/inline %1={@wipe %0/P_%d0_*};@set %0=POSTS:[setr(!,setdiff(get(%0/POSTS),%1),newposts)];th setq(!,BBS_[edit(objid(%0),:,_)].READ,bbattr);@dolist/inline searchngobjid(EVAL=\[attrcnt(##/%q<bbattr>)\])={@set %d0=%q<bbattr>:[setinter(get(%d0/%q<bbattr>),%q<newposts>)]}
@@ %0 - board, %1 - IDS to remove.

&SW.REMOVE #bbs=@attach %!/INC.CANMODIFY=trim(before(%0,/)),trim(after(%0,/)),removed;@break/inline cand(!strmatch(%q<post>,*.*),words(%q<replies>),!cand(u(FIL.CANADMIN,%q<board>,%#),strmatch(%1,DELETE)))=@pemit %#=Permission denied. Only board admin may delete posts which have replies by entering it as [ansi(hw,+bbremove <board>/<post>=DELETE)] to verify.;@attach %!/DO_REMOVE=%q<board>,setr(!,if(strmatch(%q<post>,*.*),%q<post>,%q<post> %q<replies>),ids);@pemit %#=Removed Posts '%q<ids>' from Board '[u(%q<board>/GETID)] [cname(%q<board>)]';@attach #inc/MSG_ALERT=Removed Posts '%q<ids>' from Board '[u(%q<board>/GETID)] [cname(%q<board>)]'

&SW.WRITE #bbs=@assert/inline hasattr(%#/BBS.CURRENT.TITLE)=@pemit %#=You are not writing a post!;@assert/inline strlenraw(%2)=@pemit %#=No text entered to append!;@break/inline gte(add(strlenraw(%2),strlenraw(get(%#/BBS.CURRENT.BODY))),sub(config(lbuf_size),1))=That would break buffer capacity.;@set %#=BBS.CURRENT.BODY:[if(strlenraw(setr(!,get(%#/BBS.CURRENT.BODY),bdy)),cat(%q<bdy>,%2),%2)];@pemit %#=Text appended. Use [ansi(hw,+bbproof)] to view the results.

&SW.TOSS #bbs=@assert/inline hasattr(%#/BBS.CURRENT.TITLE)=@pemit %#=You are not writing a post!;@wipe %#/BBS.CURRENT.*;@pemit %#=Post in progress cleared.

&SW.PROOF #bbs=@assert/inline hasattr(%#/BBS.CURRENT.TITLE)=@pemit %#=You are not writing a post!;@pemit %#=header([u(setr(!,get(%#/BBS.CURRENT.BOARD),board)/GETID)]: [cname(%q<board>)]);@if hasattr(%#/BBS.CURRENT.REPLY)={@pemit %#=Reply to: [u(%q<board>/GETID)]/[setr(!,get(%#/BBS.CURRENT.REPLY),reply)]: [after(get(%q<board>/P_%q<reply>_HDR),^)]},{@pemit %#=Title: [get(%#/BBS.CURRENT.TITLE)]};@pemit %#=separator();@pemit %#=get(%#/BBS.CURRENT.BODY);@pemit %#=footer(Buffer Remaining: [strlenraw(get(%#/BBS.CURRENT.BODY))]/[sub(config(lbuf_size),1)])

&SW.JOIN #bbs=@attach %!/FINDBOARD=%0,board;@break/inline u(FIL.SUBSCRIBED,%q<board>,%#)=@pemit %#=You are already subscribed to [cname(%q<board>)]!;@set %#=[setr(!,BBS_[edit(objid(%q<board>),:,_)]_OPTIONS,attr)]:[del_kv(get(%#/%q<attr>),Subscribed)];@pemit %#=You have joined Board '[cname(%q<board>)]'!

&SW.LEAVE #bbs=@attach %!/FINDBOARD=%0,board;@assert/inline u(FIL.SUBSCRIBED,%q<board>,%#)=@pemit %#=You are not subscribed to [cname(%q<board>)]!;@set %#=[setr(!,BBS_[edit(objid(%q<board>),:,_)]_OPTIONS,attr)]:[set_kv(get(%#/%q<attr>),Subscribed,0)];@pemit %#=You have unsubscribed from Board '[cname(%q<board>)]'!

&SW.NEXT #bbs=@dolist/inline %q<visiboards>={th setq(!,get(strfirstof(account(%#),%#)/BBS.[edit(objid(%d0),:,_)].READ),read);@dolist/inline get(%d0/POSTS)={@break/inline !match(%q<read>,%d0)={@attach %!/DO_DISPLAY=%d1,%d0}}};@pemit %#=There are no unread posts you can see! Hooray!

&SW.NEW #bbs=@attach %!/SW.NEXT

&SW.SCAN #bbs=@pemit %#=header(mudname() BBS - Unread Posts);@if words(%q<visiboards>)={th setq(!,strfirstof(account(%#),%#),target);@dolist/inline %q<visiboards>={@if words(setr(!,setdiff(get(%d0/POSTS),get(%q<target>/BBS.[edit(objid(%d0),:,_)].READ)),unread))={@if !strmatch(%q<last>,setr(!,loc(%d0),last))={@pemit %#=separator(if(hastotem(%q<last>,FACTION),cname(%q<last>),Public) Boards)};@pemit %#=\([u(%d0/GETID)]\) [cname(%d0)]: [words(%q<unread>)] Unread \([iter(%q<unread>,%i0,%b,%,%B)]\)}}};@pemit %#=footer()

&DO_CATCHUP #bbs=@cpattr %0/POSTS=%1/BBS.[edit(objid(%0),:,_)].READ
@@ %0 - board, %1 - target

&SW.CATCHUP #bbs=th setq(!,strfirstof(account(%#),%#),target);@if strmatch(%0,ALL)={@dolist/inline %q<visiboards>={@skip getconf(%d0,MANDATORY)={@attach %!/DO_CATCHUP=%d0,%q<target>}};@pemit %#=All posts on all non-Mandatory boards have been marked Read. Hope you didn't miss something useful.},{@attach %!/FINDBOARD=%0,board;@break/inline getconf(%d0,MANDATORY)=@pemit %#=That board is MANDATORY reading.;@attach %!/DO_CATCHUP=%q<board>,%q<target>;@pemit %#=Set all posts Read for Board '[cname(%q<board>)]'. Hope you didn't miss something useful.}

&SW.TIMEOUT #bbs=@attach %!/BOARD_ADMIN=trim(before(%0,/));@assert/inline match(get(%q<board>/POSTS),setr(!,trim(before(%0,/)),post))=@pemit %#=Post '%q<post>' not found.;@break/inline strmatch(%q<post>,*.*)=@pemit %#=Replies don't have timeouts.;@assert/inline strlen(%1)=@pemit %#=Must enter a new timeout!;@if lte(%1,0)={th setq(!,-1,value);th setq(!,None,valueformat)},{@attach #inc/VALID.DURATION=%1,Timeout;th setq(!,add(%q<value>,secs()),value)};@set %q<board>=P_%q<post>_HDR:[set_kv(before(setr(!,get(%q<board>/P_%q<post>_HDR),hdr),^),Timeout,%q<value>)]^[after(%q<hdr>,^)];@pemit %#=Timeout of '' Post '%q<post>: [after(%q<hdr>,^)]' changed to: %q<valueformat>

&FIL.TIMEOUT #bbs=cand(isint(%0),!eq(setr(!,get_kv(before(get(%1/P_%0_HDR),^),Timeout),timeout),-1),gte(%2,%q<timeout>))

&FN.TIMEDOUT #bbs=iter(filter(FIL.TIMEOUT,%1,%b,%b,%0),%i0 [graball(%1,%i0.*)])

&HANDLE_CLEANUP #bbs=@if words(setr(!,u(FN.TIMEDOUT,%0,get(%0/POSTS)),timedout))={@attach %!/DO_REMOVE=%0,%q<timedout>}

&RUN_CLEANUP #bbs=@if getconf(%!,TIMEOUTS)={@dolist/inline [u(FN.BOARDS)]={@if getconf(%d0,USETIMEOUT)={@attach %!/HANDLE_CLEANUP=%d0}}};@wait [mul(60,60,1)]={@trigger %!/RUN_CLEANUP}

&HANDLE_MANDATORY #bbs=th setq(!,get(%0/POSTS),posts);th setq(!,BBS_[edit(objid(%0),:,_)].READ,attr);th setq(!,[u(%0/GETID)]: [cname(%0)],bname);@dolist/inline/delimit | %1={@if words(setr(!,setdiff(%q<posts>,get(after(%d0,~)/%q<attr>)),unread))={@pemit [before(%d0,~)]=[ansi(c,BBS:)]%BThere are [words(%q<unread>)] Unread posts on [ansi(hr,MANDATORY)] Board '%q<bname>'.}}

&RUN_MANDATORY #bbs=th setq(!,iter(lwhoid(),%i0~[strfirstof(account(%i0),%i0)],%b,|),online);@if strlen(%q<online>)={@dolist/inline [u(FN.BOARDS)]={@if getconf(%d0,MANDATORY)={@attach %!/HANDLE_MANDATORY=%d0,%q<online>}}};@wait [getconf(%!,MANINTERVAL)]={@trigger %!/RUN_MANDATORY}

@startup #bbs=@trigger %!/RUN_CLEANUP;@trigger %!/RUN_MANDATORY

&HLP_@BBS #bbs=Our BBS (Bulletin Board System) is inspired by Myrddin's classic MUSH/MUX BBS and has largely the same syntax and features. Read/Unread data is stored on your Account if you have one.%R%R[ansi(hc,Aliases:)] The commands can be prefixed with [ansi(hw,+bb)], [ansi(hw,@bb)] or just [ansi(hw,bb)]. So [ansi(hw,+bbread)] works and so does [ansi(hw,bbread)].%R%R[ansi(hc,Reading Boards and Posts)]%R%R[ansi(hw,+bbread)]%R%TDisplays all subscribed boards.%R%R[ansi(hw,+bbread <BoardID>)]%R%TLists all available posts on a Board.%R%R[ansi(hw,+bbread <BoardID>/<PostID>)]%R%TDisplay a specific post.%R%R[ansi(hw,+bblist)]%R%TDisplay all boards. Even ones you unsubscribed from.%R%R[ansi(hw,+bbleave)]%R%TUnsubscribe from a board. You won't hear about new posts or see it in +bbread.%R%R[ansi(hw,+bbjoin <BoardID>)]%R%TRe-subscribe to a Board.%R%R[ansi(hw,+bbscan)]%R%TShow an index of all boards with unread posts.%R%R[ansi(hw,+bbnext)] or [ansi(hw,+bbnew)]%R%TDisplay the next available post you haven't read if one exists. It goes down the list of boards and then finds the first post.%R%R[ansi(hc,Writing Posts)]%R%R[ansi(hw,+bbpost <BoardID>/<title>=<message>)] or [ansi(hw,+bbreply <BoardID>/<PostID>=<message>)]%R%TThe 'quick' form of posting a message that does it in one command.%R%R[ansi(hw,+bbpost <BoardID>/<title>)] or [ansi(hw,+bbreply <BoardID>/<PostID>)]%R%TBegin writing a message and open a writing buffer.%R%R[ansi(hw,+bb <text>)]%R%TAppend text to an opened buffer.%R%R[ansi(hw,+bbproof)]%R%TDisplay post in progress.%R%R[ansi(hw,+bbtoss)]%R%TCancel post in progress.%R%R[ansi(hw,+bbedit <type>=<search>^^^<replace>)]%R%T<type> can be TITLE or BODY. Edits a post in progress. This uses [ansi(hw,medit\(\))] under the hood so check out help medit\(\)%R%R[ansi(hc,Managing Posts)]%R[ansi(hw,ON THREADS:)] A post can only be removed or edited by the original poster if it has no replies. That means that only the bottom post in a thread can be modified by the original poster. AdminLock is needed to override this restriction.%R[ansi(hw,ON TIMEOUTS:)] Timeouts are checked roughly every hour, but not necessarily ON the hour. Replies have no timeouts, they are tied to the root post. Every new reply will reset the timeout on a root post.%R%R[ansi(hw,+bbedit <BoardID>/<PostID>=<search>^^^<replace>)]%R%TEdits a post body.%R%R[ansi(hw,+bbremove <BoardID>/<PostID>)]%R%TDeletes a Post. Removing a root post will delete the entire thread so beware.%R%R[ansi(hw,+bbcatchup <board|ALL>)]%R%TMarks all posts on a Board as read. Won't work on Mandatory boards. Use [ansi(hw,+bbcatchup all)] to run it on all boards you can see.%R%R[ansi(hw,+bbtimeout <BoardID>/<PostID>=<duration>)]%R%TSet a new timeout on a given post. <duration> must be a value like 30d 5h (30 days, 5 hours). Alternatively, a value of -1 marks the post as persistent and immune to timeouts.%R%R[ansi(hc,Board Administration)]%R[ansi(hw,ON LOCKS:)] Boards have three Locks: ReadLock, PostLock, and AdminLock. Later ones supersede earlier ones - IE: if you pass PostLock, you can also Read, even if you don't explicitly pass the lock. The default locks on Public Boards are: Everyone can Read and Post, Bittype 5 can Admin.[if(setr(!,isdbref(tag(fac)),fac),%R[ansi(hw,ON FACTION BOARDS:)]%BFactions can have Boards if they have a unique ABBREVIATION assigned in their @fac/options. The ABBREVIATION becomes a unique BoardID prefix. The default locks of a Faction Board are: Members can Read and Post. Rank 2 or better can Admin. Only Rank 2 or better can create/delete/rename/etc Faction Boards.)]%R%R[ansi(hw,+bbcreate <BoardID>=<name>)]%R%TCreate a new Board. <BoardID> should be a positive integer.[if(%q<fac>,%BAlternatively it should be <abbr><num> to create a Faction Board.)]%R%R[ansi(hw,+bbdelete <BoardID>=<name or objid>)]%R%TDelete a Board. [ansi(hr,This cannot be undone.)]%R%R[ansi(hw,+bborder <BoardID>=<number>)]%R%TChange a Board's order #. Order #'s must be unique per ID space.%R%R[ansi(hw,+bbrename <BoardID>=<new name>)]%R%TRename a board. Board names need not be unique. ANSI color is supported.%R%R[ansi(hw,+bblock <BoardID>/<Lock>=<key>)]%R%TLocks a Board. The available Locks are: ReadLock, PostLock, and AdminLock.%R%R[ansi(hw,+bbunlock <BoardID>/<Lock>)]%R%TRestores the default locks for <lock> type.%R%R[ansi(hw,+bbexamine <BoardID>)]%R%TDisplay some admin info about a Board.%R%R[ansi(hw,+bboptions <board>)]%R%TDisplay admin options for a given Board.%R%R[ansi(hw,+bboptions <board>/<option>=<value>)]%R%TSet a new option.%R%R[ansi(hw,+bbconfig)]%R%TDisplay global board options.%R%R[ansi(hw,+bbconfig <option>=<value>)]%R%TSet a new global option. Wizard only.
+help/add Communications/BBS=#bbs/HLP_@BBS